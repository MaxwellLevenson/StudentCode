<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PiEAPI</name>
    </assembly>
    <members>
        <member name="T:PiEAPI.Actuator">
            <summary>
            IMPORTANT: Classes that implement Actuator should use properties for  setting values.
            Implementations also must have a GetValues() method.
            that will return a collection of the current state of the actuator,
            and a SetValues(*args) method that can set the Actuator state at once.
            This interface is very similar to ActuatorController in PiER versions .41 or lower.
            </summary>
        </member>
        <member name="M:PiEAPI.Actuator.Write">
            <summary>
            The software framework will call this method to actually update values
            (e.g. send the I2C motor values to the motor controller).
            This method will hopefully be called on a regular basis.
            </summary>
        </member>
        <member name="M:PiEAPI.Actuator.Kill">
            <summary>
            Stop all actuation (e.g. stop and brake motors).
            </summary>
        </member>
        <member name="M:PiEAPI.Actuator.Revive">
            <summary>
            Undo kill.
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogForceSensor">
            <summary>
            A class for an analog force sensor.
            This class inherits the AnalogSensor class.
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogSensor">
            <summary>
            Base class for analog sensors.
            </summary>
        </member>
        <member name="T:PiEAPI.Hardware">
            <summary>
            A base class for all hardware elements e.g. sensors, actuators...
            Stores the robot that all hardware elements are attached to.
            </summary>
        </member>
        <member name="F:PiEAPI.Hardware.robot">
            <summary>
            The field that stores the robot corresponding
            to a particular hardware element.
            </summary>
        </member>
        <member name="M:PiEAPI.Hardware.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes a new instance of the Hardware class.
            This is intended to be called from subclasses during instantiation
            so that each hardware element knows which robot it is attached to.
            </summary>
            <param name="robot"> The robot that is creating
            its sensor/actuator object. </param>
        </member>
        <member name="P:PiEAPI.Hardware.Automaton">
            <summary>
            Gets the stored Robot field. The property will give public access
            to the Robot object without allowing it to be edited.
            </summary>
        </member>
        <member name="T:PiEAPI.Sensor">
            <summary>
            Interface for all sensors plus I2CMotorController and I2CEncoder.
            Will probably change interface name in the future.
            </summary>
        </member>
        <member name="M:PiEAPI.Sensor.AddToGlobalList">
            <summary>
            Adds this sensor to the robot's list of all sensors.
            </summary>
        </member>
        <member name="M:PiEAPI.Sensor.GetValues">
            <summary>
            Gets the most recently stored value(s).
            </summary>
            <returns>An Array of the stored value(s) from the last Update()</returns>
        </member>
        <member name="M:PiEAPI.Sensor.Update">
            <summary>
            Read the data and set Values to be whatever you read
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogSensor.robot">
            <summary>
            The robot instance this sensor belongs to.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogSensor.analog">
            <summary>
            Port object representing this analog sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogSensor.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes an instance of AnalogSensor whose port is already
            instantiated by a subclass. The purpose of this constructor
            is solely to allow the subclass constructors to call base(robot)
            instead of defining their own addToGlobalList.
            </summary>
            <param name="robot">Robot instance this sensor belongs to.</param>
        </member>
        <member name="M:PiEAPI.AnalogSensor.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            Initializes an object for generic analog sensors that do not
            have a subclass built for them. Takes in only one pin.
            </summary>
            <param name="robot">Robot object this sensor belongs to.</param>
            <param name="pin">Analog pin that this sensor is
            plugged into.</param>
        </member>
        <member name="M:PiEAPI.AnalogSensor.AddToGlobalList">
            <summary>
            Adds this sensor to the robot's list of all sensors.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogSensor.Update">
            <summary>
            Read and store a value from this sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogSensor.GetValues">
            <summary>
            Gets the last updated sensor value.
            </summary>
            <returns>An Array with the sensor value.</returns>
        </member>
        <member name="P:PiEAPI.AnalogSensor.Value">
            <summary>
            Last updated value is stored in this field.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogForceSensor.forceSensor">
            <summary>
            Represents an analog input pin.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogForceSensor.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            The constructor of AnalogForceSensor.
            It assigns an AnalogIn object corresponding to a pin,
            and scales input to 0-100.
            </summary>
            <param name="robot">Robot object this sensor belongs to.</param>
            <param name="pin">The pin the sensor is attached to</param>
        </member>
        <member name="M:PiEAPI.AnalogForceSensor.Update">
            <summary>
            Read and store a value from this sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogForceSensor.GetValues">
            <summary>
            Gets the last updated sensor value.
            </summary>
            <returns>An Array with the sensor value.</returns>
        </member>
        <member name="P:PiEAPI.AnalogForceSensor.Force">
            <summary>
            Represents the most recently updated force value of the sensor.
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogReflectanceSensor">
            <summary>
            Represents an analog reflectance sensor.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogReflectanceSensor.robot">
            <summary>
            The robot instance this sensor belongs to.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogReflectanceSensor.reflectSensor">
            <summary>
            Port object representing this analog sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogReflectanceSensor.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            Initializes an instance of AnalogSensor whose port is already
            instantiated by a subclass. The purpose of this constructor
            is solely to allow the subclass constructors to call base(robot)
            instead of defining their own addToGlobalList.
            </summary>
            <param name="robot">Robot instance this sensor belongs to.</param>
            <param name="pin">Pin the reflectSensor is plugged into.</param>
        </member>
        <member name="M:PiEAPI.AnalogReflectanceSensor.Update">
            <summary>
            Update() reads the value of the sensor and stores it to the value array.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogReflectanceSensor.GetValues">
            <summary>
            GetValues() returns the data stored in the value array field.
            </summary>
            <returns>Returns an int array containing the updated value of the sensor.</returns>
        </member>
        <member name="P:PiEAPI.AnalogReflectanceSensor.Reflectance">
            <summary>
            Stores the reflectance value that gets updated and returned in GetValues().
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogIRDistanceSensor">
            <summary>
            Base class for the analog ir distance sensor
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogIRDistanceSensor.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            Create a new AnalogIRDistanceSensor object.
            </summary>
            <param name="robot">The robot to which it belongs.</param>
            <param name="pin">The pin to which it is attached.</param>
        </member>
        <member name="P:PiEAPI.AnalogIRDistanceSensor.Distance">
            <summary>
            Last updated distance value is stored in this field.
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogSonarDistanceSensor">
            <summary>
            Base class for the analog sonar distance sensor
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogSonarDistanceSensor.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            Create a new AnalogSonarDistanceSensor object.
            </summary>
            <param name="robot">The robot to which it belongs.</param>
            <param name="pin">The pin to which it is attached.</param>
        </member>
        <member name="P:PiEAPI.AnalogSonarDistanceSensor.Distance">
            <summary>
            Last updated distance value is stored in this field.
            </summary>
        </member>
        <member name="T:PiEAPI.BatteryBuzzer">
            <summary>
            Battery Buzzer-- checks if the battery is connected.
            If the battery is not connected, the BatteryBuzzer will activate the
            Sherlock Error LED, and the Robot will disable actuators.
            </summary>
        </member>
        <member name="F:PiEAPI.BatteryBuzzer.batteryPresencePin">
            <summary>
            The battery presence pin.
            </summary>
        </member>
        <member name="F:PiEAPI.BatteryBuzzer.robot">
            <summary>
            The robot.
            </summary>
        </member>
        <member name="M:PiEAPI.BatteryBuzzer.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes an instance of the BatteryBuzzer class.
            </summary>
            <param name="robot">
             The robot used to indicate fault with battery.
            </param>
        </member>
        <member name="M:PiEAPI.BatteryBuzzer.Update">
            <summary>
            Checks if the battery is connected, assigns this.BatteryConnected.
            </summary>
        </member>
        <member name="P:PiEAPI.BatteryBuzzer.BatteryConnected">
            <summary>
            Gets a value indicating whether the battery is connected (good),
            false if not (bad).
            </summary>
        </member>
        <member name="T:PiEAPI.ConsoleData">
            <summary>
            The class that represents the console messages to PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.ConsoleData.#ctor(System.Byte,System.Char[])">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.ConsoleData"/> class.
            </summary>
            <param name="identByte">The identification byte to send.</param>
            <param name="chars">
            The characters to be sent.
            </param>
        </member>
        <member name="M:PiEAPI.ConsoleData.GetData">
            <summary>
            Puts our data into a single array to send back to PiEMOS.
            </summary>
            <returns>The array of data to send.</returns>
        </member>
        <member name="P:PiEAPI.ConsoleData.Ident">
            <summary>Gets or sets the ident byte.</summary>
        </member>
        <member name="P:PiEAPI.ConsoleData.Message">
            <summary>Gets or sets the analog data.</summary>
        </member>
        <member name="T:PiEAPI.DigitalDistanceSensor">
            <summary>
            Represents a digital distance sensor.
            </summary>
        </member>
        <member name="T:PiEAPI.DigitalSensor">
            <summary>
            Generic class for digital sensors.
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalSensor.robot">
            <summary>
            The robot instance this sensor belongs to.
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalSensor.digital">
            <summary>
            Port object representing this analog sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.DigitalSensor.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes an instance of DigitalSensor whose port is already
            instantiated by a subclass. The purpose of this constructor
            is solely to allow the subclass constructors to call base(robot)
            instead of defining their own addToGlobalList.
            </summary>
            <param name="robot">Robot instance this sensor belongs to.</param>
        </member>
        <member name="M:PiEAPI.DigitalSensor.#ctor(PiEAPI.Robot,PiE.HAL.Microsoft.SPOT.Hardware.InputPort)">
            <summary>
            Initializes an object for generic digital sensors that do not
            have a subclass built for them. Takes in only one pin.
            </summary>
            <param name="robot">Robot object this sensor belongs to.</param>
            <param name="pin">Digital pin that this sensor is
            plugged into.</param>
        </member>
        <member name="M:PiEAPI.DigitalSensor.AddToGlobalList">
            <summary>
            Adds this sensor to the robot's list of all sensors.
            </summary>
        </member>
        <member name="M:PiEAPI.DigitalSensor.GetValues">
            <summary>
            Gets the last updated sensor value.
            </summary>
            <returns>An Array with the sensor value.</returns>
        </member>
        <member name="M:PiEAPI.DigitalSensor.Update">
            <summary>
            Read and store a value from this sensor.
            </summary>
        </member>
        <member name="P:PiEAPI.DigitalSensor.Value">
            <summary>
            Gets or sets updated value is stored in this field.
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalDistanceSensor.distanceSensor">
            <summary>
            Port object representing this digital sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.DigitalDistanceSensor.#ctor(PiEAPI.Robot,PiE.HAL.Microsoft.SPOT.Hardware.InputPort)">
            <summary>
            Constructor called DigitalDistanceSensor.
            </summary>
            <param name="robot">Robot instance this sensor belongs to.</param>
            <param name="pin">Pin the distanceSensor is plugged into.</param>
        </member>
        <member name="M:PiEAPI.DigitalDistanceSensor.GetValues">
            <summary>
            Gets the value called isClose.
            </summary>
            <returns>Returns an boolean array containing the updated value of the sensor.</returns>
        </member>
        <member name="M:PiEAPI.DigitalDistanceSensor.Update">
            <summary>
            Generic output-value-getting method
            </summary>
        </member>
        <member name="P:PiEAPI.DigitalDistanceSensor.IsClose">
            <summary>
            Stores the boolean value that indicates whether the input 
            is within distance range (True) or not (False)
            </summary>
        </member>
        <member name="T:PiEAPI.DigitalLimitSwitch">
            <summary>
            Represents a limit switch
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalLimitSwitch.NumPastValues">
            <summary>
            The number of past values to store.
            Used for debouncing.
            Must be greater than zero.
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalLimitSwitch.pastValues">
            <summary>
            Stores past values in an array.
            Used for debouncing.
            </summary>
        </member>
        <member name="F:PiEAPI.DigitalLimitSwitch.limitSwitch">
            <summary>
            Pin to which this switch is attached.
            </summary>
        </member>
        <member name="M:PiEAPI.DigitalLimitSwitch.#ctor(PiEAPI.Robot,PiE.HAL.Microsoft.SPOT.Hardware.InputPort)">
            <summary>
            Instantiates a new DigitalLimitSwitch object.
            </summary>
            <param name="robot">Robot instance this sensor belongs to.</param>
            <param name="pin">Pin the limitSwitch is plugged into.</param>
        </member>
        <member name="M:PiEAPI.DigitalLimitSwitch.GetValues">
            <summary>
            Gets the property IsPressed in an Array.
            </summary>
            <returns>Returns IsPressed in an Array.</returns>
        </member>
        <member name="M:PiEAPI.DigitalLimitSwitch.Update">
            <summary>
            Update the switch status, with debouncing.
            </summary>
        </member>
        <member name="P:PiEAPI.DigitalLimitSwitch.IsPressed">
            <summary>
            Stores the boolean value that indicates whether the input 
            is pressed (True) or not (False)
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            This is required to implement extension methods.
            </summary>
        </member>
        <member name="T:PiEAPI.GrizzlyBear">
            <summary>
            The actual motor controller for a piece of hardware. This is what
            will be sending commands to the motor, setting velocity/brakes.
            This handles some of the lower level stuff so the students don't
            have to worry about it.
            </summary>
        </member>
        <member name="T:PiEAPI.MotorBase">
            <summary>
            This is a general implementation of the Motor interface.
            It provides a very generic implementation of the
            various properties defined for a motor. Most, if not all
            specific motors should inherit this.
            </summary>
        </member>
        <member name="T:PiEAPI.Motor">
            <summary>
            The interface all motors must implement. This provides a standard
            set of values a motor has to have defined such as throttle, braking,
            min/max throttle, upper and lower stopzones.
            </summary>
        </member>
        <member name="M:PiEAPI.Motor.SetValues(System.Collections.ArrayList)">
            <summary>
            SetValues is used to set all properties of Motor
            at once and returns the actual state.
            </summary>
            <param name="state">The state this object will
            be set to.</param>
            <returns>The actual state the motor was set to. This may be
            different from the argument if the state was invalid.</returns>
        </member>
        <member name="M:PiEAPI.Motor.GetValues">
            <summary>
            Returns the current state of the Motor.
            </summary>
            <returns>The state of the motor.</returns>
        </member>
        <member name="P:PiEAPI.Motor.Throttle">
            <summary>
            Gets or sets a value indicating the power supplied to and
            direction of the motor. Throttle is limited to the
            range [-100, 100] (this matches the Polar Bear Motor Controller).
            By convention, a positive Throttle should cause a
            counter-clockwise rotation of the motor when the axle
            is facing you. This convention is necessary for the Driver class
            If a positive value results in a clockwise motion, then negate
            the reverseVelocity property
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.ReverseMotorDirection">
            <summary>
            Gets a value indicating whether the motor is wired
            backwards. This property causes the velocity sent to the
            motor (@ActualThrottle) to be negated. A positive @Throttle
            should cause a counter-clockwise rotation of the motor when
            the axle is facing you. If a positive Velocity causes a
            clockwise rotation, then set this property to true. If this
            property is already true and a positive Velocity causes a
            clockwise rotation, then set this to false.
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.BrakeAmount">
            <summary>
            When set, this value will determine the drive mode the motor will
            use. Values less than 3 will cause allow the motor to coast while
            values greater than or equal to 3 will cause the motor to actively
            brake when it is not driving. In this Drive/Brake scheme, the
            throttle becomes the percentage of time the controller will spend
            driving compared to braking.
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.MaxForwardsThrottle">
            <summary>
            Gets or sets a value that limits the maximum forward speed
            of the motor. The value of Throttle is quadratically scaled
            up to the MaxForwardsThrottle. A value of 100 has no effect.
            MaxForwardsThrottle > MaxReverseThrottle
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.MaxReverseThrottle">
            <summary>
            Gets or sets a value that limits the maximum backwards speed
            of the motor. The value of Throttle is quadratically scaled
            down to MaxReverseThrottle. A value of-100 has no effect.
            MaxForwardsThrottle > MaxReverseThrottle
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.UpperStopZone">
            <summary>
            Gets or sets the minimum forward speed at which the motor
            starts moving. Throttle is scaled quadratically to avoid
            the UpperStopZone (except for 0)
            Should be [0, 100]
            Try a value of 35 for the standard kit drivetrain.
            </summary>
        </member>
        <member name="P:PiEAPI.Motor.LowerStopZone">
            <summary>
            Gets or sets the minimum backwards speed at which the motor
            starts moving. Throttle is scaled quadratically to avoid
            the UpperStopZone (except for 0).
            Should be [-100,0]
            Try a value of -35 for the standard kit drivetrain.
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.brakeAmount">
            <summary>
            See description of Motor.BrakeAmount
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.throttle">
            <summary>
            See description of Motor.Throttle.
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.reverseVelocity">
            <summary>
            See description of Motor.ReverseMotorDirection.
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.maxVelocity">
            <summary>
            See description of Motor.MaxForwardsThrottle.
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.minVelocity">
            <summary>
            See description of Motor.MaxReverseThrottle.
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.upperStopZone">
            <summary>
            See description of Motor.UpperStopZone
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.lowerStopZone">
            <summary>
            See description of Motor.LowerStopZone
            </summary>
        </member>
        <member name="F:PiEAPI.MotorBase.changedThrottle">
            <summary>
            This is set to true whenever the value of Throttle is changed.
            </summary>
        </member>
        <member name="M:PiEAPI.MotorBase.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes a new instance of the MotorBase class. This will
            associate the motor with a particular Robot robot.
            </summary>
            <param name="robot">The robot this motor belongs to.</param>
        </member>
        <member name="M:PiEAPI.MotorBase.GetValues">
            <summary>
            Gives a 'snapshot' of the motor's current state.
            </summary>
            <returns>An ArrayList of all state variables of the motor</returns>
        </member>
        <member name="M:PiEAPI.MotorBase.SetValues(System.Collections.ArrayList)">
            <summary>
            Added for sake of flexibility. This will allow you to completely
            set the state of the motor. It should be used by first calling
            GetValues and editing those values. Then pass the modified
            ArrayList into SetValues.
            </summary>
            <param name="state">The complete state the motor is desired
            to be in.</param>
            <returns>The current state of the motor after applying the changes
            detailed in the argument. Can check if update was
            successful.</returns>
        </member>
        <member name="M:PiEAPI.MotorBase.GenerateRawVelocity">
            <summary>
            Computes what the value of velocity should be
            based on the parameters given. If ReverseMotorDirection is true,
            the actual velocity should be negative of the velocity argument.
            This scales the output quadraticall compared to the inputs giving
            better precision at low speeds and greater maneuverability at high
            speeds.
            </summary>
            <returns>Returns a value to be used as actual velocity.
            Defines the characteristic input/output relationship.</returns>
        </member>
        <member name="P:PiEAPI.MotorBase.Throttle">
            <summary>
            See Motor.Throttle
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.ReverseMotorDirection">
            <summary>
            See Motor.ReverseMotorDirection
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.BrakeAmount">
            <summary>
            See Motor.BrakeAmount
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.MaxForwardsThrottle">
            <summary>
            See Motor.MaxForwardsThrottle.
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.MaxReverseThrottle">
            <summary>
            See Motor.MaxReverseThrottle.
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.UpperStopZone">
            <summary>
            See Motor.UpperStopZone
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.LowerStopZone">
            <summary>
            See Motor.LowerStopZone
            </summary>
        </member>
        <member name="P:PiEAPI.MotorBase.ChangedThrottle">
            <summary>
            See MotorBase.changedThrottle.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Clock">
            <summary>
            Clock is the I2C device's clock rate in Hz.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Timeout">
            <summary>
            Timeout is the amount of time, in milliseconds, the
            robot will wait after sending instructions without receiving a
            response before closing the connection.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.deviceAddress">
            <summary>
            deviceAddress is the address the motor controller is located.
            This is the target of all instruction write procedures.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.connectionConfig">
            <summary>
            connectionConfig is the communication protocol to the motor
            controller. It holds an I2CDevice object representing our
            motor.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.actionBuffer">
            <summary>
            actionBuffer is an array to hold and send a sequence of actions to
            the motor for execution. Its length is one because we only need to
            send a series of one command.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.sendBuffer">
            <summary>
            sendBuffer is a struct to communicate how we want the motor to
            behave. The 0th index is the register we want to write to, the
            1st index is the value we want to write to that register. When
            a register is written, the register pointer is incremented
            automatically so the 2nd index is written to the next register and
            so on. We should never change the value of index 0, 2, 3, 4, 5,
            and 8 because either those registers are not used, the value
            written is irrelevant, or the value should stay the same.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.tickCounter">
            <summary>
            Counter for ticks on the grizzly. This number indicates how many
            control loop cycles have passed on the grizzly since startup. This
            is used to detect power failure on the motor controller.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.currentLimit">
            <summary>
            The maximum number of amps that can be sourced by the grizzly.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.accelerationLimit">
            <summary>
            The maximum acceleration allowed by the grizzly in units of change
            in PWM/s.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.heartbeat">
            <summary>
            This keeps track of pacing for the grizzly. Enables us to refresh
            commands at regular intervals.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.waitTime">
            <summary>
            This is the amount of time that we will wait before forcing a
            refresh on motor state.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.#ctor(PiEAPI.Robot,System.UInt16,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the GrizzlyBear class. This
            represents the motor fitted to the robot and we communicate
            new values to and from it here.
            </summary>
            <param name="robot"> robot is the Robot object this piece of
            hardware belongs to. </param>
            <param name="deviceAdd"> deviceAdd is the device address. It allows
            us to specifically communicate with the correct robot. </param>
            <param name="grizzlyMaxReverseThrottle"> This is an
            optional parameter for the students. They can change the
            maximum reverse velocity should they choose to. This value will
            still be clamped to abide by the firmware limitation of
            -100.</param>
            <param name="grizzlyMaxForwardsThrottle"> This is an optional
            parameter for the students. They can change the maximum forwards
            velocity should they choose to. This value will still be clamped
            to abide by the firmware limitation of 100.</param>
            <param name="hasExtensionGearbox">Defines whether this grizzly is
            coupled to a Kit Extension Gearbox. This is critical to motor
            performance. If you do not set this properly, YOU WILL BREAK YOUR
            MOTOR.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.#ctor(PiEAPI.Robot,System.UInt16,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            This is exactly the same as the most explicit Grizzly constructor
            with an additional parameter setting this Grizzlybear motor
            controller to negate any given throttles. That way, the rotational
            direction is opposite that of the normal constructor.
            </summary>
            <param name="robot">Same robot as above.</param>
            <param name="deviceAdd">Same address as above.</param>
            <param name="grizzlyMaxReverseThrottle">Same maximum reverse
            throttle as above.</param>
            <param name="grizzlyMaxForwardsThrottle">Same maximum forward
            throttle as above.</param>
            <param name="hasExtensionGearbox">Same flag denoting the presence
            of a kit extension motor/gearbox as above.</param>
            <param name="reverseMotorDirection">New parameter. Causes all throttles
            to be reversed compared to the normal constructor.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.#ctor(PiEAPI.Robot,System.UInt16)">
            <summary>
            Same as above with default arguments.
            </summary>
            <param name="robot">Same robot as above.</param>
            <param name="deviceAdd">Same address as above.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.#ctor(PiEAPI.Robot,System.UInt16,System.Boolean)">
            <summary>
            Provides a Grizzly with mostly default arguments. The difference
            is that this motor will have the opposite rotational direction
            as a standard Grizzly object.
            </summary>
            <param name="robot">Same robot as above.</param>
            <param name="deviceAdd">Same address as above.</param>
            <param name="reverseMotorDirection">Defines whether or not to
            intuitively reverse the motor throttles.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.Write">
            <summary>
            As part of the Actuator interface, this allows the operating state
            of the motor to be set to drive at the desired speed.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.Kill">
            <summary>
            Stops the motor and prevents it from driving until
            ReviveActuators() is called. StudentCode can use this for
            fail-safety measures, etc.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.Revive">
            <summary>
            StudentCode can use this to revive after killing. This will not
            affect kills sent from the field or PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.ReadEncoder">
            <summary>
            This method will read from the motor controller the recorded number
            of encoder rotations.
            </summary>
            <returns>The number of rotations recorded by the encoder.</returns>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.SendAction(PiEAPI.GrizzlyBear.OpState,System.Int32)">
            <summary>
            Sends commands to the motor.
            </summary>
            <param name="operation">The operation state that is sent to the
            motor. This should always be a member of enum OpState.</param>
            <param name="amount">The value to write to the speed registers.
            Only the first 16 bits will be stored into registers.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.MotorCurrent">
            <summary>
            Reads the amount of current detected by the motor controller. This
            is the real current in amps.
            </summary>
            <returns>The integer value from the AVR [0, 1023].</returns>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.SetRegister(PiEAPI.GrizzlyBear.Register,System.Byte[])">
            <summary>
            Allows pushing of arbitrary bytes to an arbitrary number of
            consecutive registers;
            </summary>
            <param name="reg">The register that needs to be written</param>
            <param name="values">A byte array of values that will be written
            into the target register and consecutive registers. The data is
            all in little endian.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.LimitCurrent(System.Int32)">
            <summary>
            Sets the current limiting applied by the motor controller.
            </summary>
            <param name="lim">The maximum amount of current, in amps, allowed
            by the motor controller.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.LimitAcceleration(System.Int32)">
            <summary>
            Sets the acceleration limit register on the motor controller. Units
            are in change of PWM/ms.
            </summary>
            <param name="accel">The max change in PWM/ms allowed.</param>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.HasReset">
            <summary>
            This is a state checking method. It will see if the motor
            has been reset since the last time this method was called.
            </summary>
            <returns>Returns a boolean value indicating whether the
            grizzly has been reset or not.</returns>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.ReadRegister(PiEAPI.GrizzlyBear.Register,System.Int32)">
            <summary>
            Abstract method to read the value held in register reg and
            the next numVals number of registers.
            </summary>
            <param name="reg">The first register to read from.</param>
            <param name="numVals">The number of sequential registers to read
            from register reg.</param>
            <returns>Returns a byte array of length numVals. Contain the values
            read from the motor controller in order they were read.</returns>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.InitializeLimiting">
            <summary>
            Reusable code to re-enable current and acceleration limiting.
            Should the grizzly ever lose power or otherwise reset itself,
            we should be able to detect it and then re-enable limiting.
            Usually, power resets cause the grizzly to reboot and use
            default values for current and acceleration which may not be
            appropriate for the current setup.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyBear.GetTimeout">
            <summary>
            This method will read from the motor controller to find the timeout
            after which the grizzly will disable itself.
            </summary>
            <returns>Returns the number in seconds that defines the grizzly
            timeout period.</returns>
        </member>
        <member name="P:PiEAPI.GrizzlyBear.ConnectionDeviceA">
            <summary>
            Gets or sets the I2CDevice communication configuration. See
            connectionConfig description. This is only for legacy purposes.
            This used to be a public field so it may or may not need changing
            at runtime outside of this class. This has been renamed so
            hopefully nothing depended on it outside of this class.
            TODO(felixli): Determine if this is necessary later.
            </summary>
        </member>
        <member name="T:PiEAPI.GrizzlyBear.Register">
            <summary>
            Registers is an enum to represent the different registers on the
            motor controller.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.OpMode">
            <summary>
            This register number defines what mode the GrizzlyBear runs in.
            Bit 0 enables the motor to move.
            Bit 1 and 2 define the operating mode. We use 01 for speed
            without PID.
            Bit 3 determines whether to use locked-antiphase or sign and
            magnitude.
            Bit 4 and 5 are sign and magnitude operation mode. 00 is for
            drive, 01 is unused, and 1x is for braking.
            Bit 6 and 7 are unused or unrelated to operation.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.Unused">
            <summary>
            This is a placeholder register. Use this in place of addresses
            that will not be used or are not important for operation.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.CurrLim">
            <summary>
            The register for current limiting.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.AccLim">
            <summary>
            The register for acceleration limiting.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.Uptime">
            <summary>
            This holds the number of control loop cycles.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.MotorCurrent">
            <summary>
            This holds a measure on the amount of current flowing through
            the motor controller.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.TimeoutThreshold">
            <summary>
            This register on the Grizzly stores the number of control
            cycles the motor controller will wait without receiving any i2c
            transactions before disabling itself. By default this value is
            1024, with a control loop time of 1.024ms. Total time = 1.048s.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.Register.EncoderCount">
            <summary>
            This register on the Grizzly stores the recorded number of
            rotations as reported by the attached encoder.
            </summary>
        </member>
        <member name="T:PiEAPI.GrizzlyBear.OpState">
            <summary>
            Register 0x01 contents should be one of these operating states.
            We only need to drive, brake, and disable the motor. Therefore
            there only need to be 3 discrete states that we can switch among.
            We should only write to Register.OpMode with one of these.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.OpState.Disabled">
            <summary>
            Refers to the Disabled state. The motor should not be able to
            be driven and all speeds should be ignored.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.OpState.Drive">
            <summary>
            Refers to Drive mode. The motor will run non-PID speed, in
            sign and magnitude drive mode. It will read its speed from
            Register 0x04-0x07 in little-endian format.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyBear.OpState.DriveBrake">
            <summary>
            Refers to Braking mode. As of yet, this is unimplemented so
            the API and functionality can change.
            TODO(felixli): Document Brake mode when the firmware supports
            it.
            </summary>
        </member>
        <member name="T:PiEAPI.I2CBus">
            <summary>
            The class wraps the I2C device, keeping it from having multiple threads
            running at the same time.
            </summary>
        </member>
        <member name="F:PiEAPI.I2CBus.i2cd">
            <summary>
            The method renames the I2C devices as i2cd.
            </summary>
        </member>
        <member name="M:PiEAPI.I2CBus.#ctor">
            <summary>
            Initializes a new instance of the I2CBus class assigning the device
            to its base values. This is a dummy configuration just to set up
            the device.
            </summary>
        </member>
        <member name="M:PiEAPI.I2CBus.Execute(PiE.HAL.Microsoft.SPOT.Hardware.I2CDevice.I2CTransaction[],System.Int32,PiE.HAL.Microsoft.SPOT.Hardware.I2CDevice.Configuration)">
            <summary>
            Method executes the lock method, preventing the thread from acting
            at the same time as other threads. It creates a loop for execute
            method to run for the length of the transaction.
            </summary>
            <param name="actions">The array that is the argument of the
            transaction method.</param>
            <param name="timeout">The amount of time the class is running.
            </param>
            <param name="config">The configuration of the I2C device.</param>
        </member>
        <member name="T:PiEAPI.GrizzlyEncoder">
            <summary>
            Allows interaction with the encoder on the Robot.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyEncoder.dPerStep">
            <summary>
            Displacement per step
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyEncoder.robotObj">
            <summary>
            Robot object that represents the robot.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyEncoder.steps">
            <summary>
            Holds the number of steps travelled.
            </summary>
        </member>
        <member name="F:PiEAPI.GrizzlyEncoder.source">
            <summary>
            The GrizzlyBear motor controller that 'hosts' the encoder.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyEncoder.#ctor(System.Single,PiEAPI.GrizzlyBear,PiEAPI.Robot)">
            <summary>
            Initializes a new instance of the GrizzlyEncoder class, adds it to the
            global list of sensors.
            </summary>
            <param name="displacementPerStep">Sets the value of the step which
            is the unit this class uses to measure displacement.</param>
            <param name="source">the Grizzly bear sensor source which provides encoder data. </param>
            <param name="robot">robot is the Robot object this piece of
            hardware belongs to. </param>
        </member>
        <member name="M:PiEAPI.GrizzlyEncoder.Update">
            <summary>
            Reads the steps taken from the sensor.
            </summary>
        </member>
        <member name="M:PiEAPI.GrizzlyEncoder.GetValues">
            <summary>
            Accessor method for Displacement.
            </summary>
            <returns>Returns the value of Displacement as the first and only
            value of the array</returns>
        </member>
        <member name="M:PiEAPI.GrizzlyEncoder.AddToGlobalList">
            <summary>
            Adds sensor to the Robot's Sensor list for polling.
            </summary>
        </member>
        <member name="P:PiEAPI.GrizzlyEncoder.Displacement">
            <summary>
            Gets the displacement.
            </summary>
        </member>
        <member name="T:PiEAPI.IncomingData">
            <summary>
            Class to represent the incoming data we parse out of the XBee packet.
            </summary>
        </member>
        <member name="M:PiEAPI.IncomingData.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>Initializes a new instance of the
            <see cref="T:PiEAPI.IncomingData"/> class.
            </summary>
            <param name="packet">The incoming packet data to parse</param>
            <param name="analogByteCount">Num. analog bytes expected</param>
            <param name="digitalByteCount">Num. digital bytes expected</param>
        </member>
        <member name="P:PiEAPI.IncomingData.Ident">
            <summary>Gets or sets the ident byte.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.FieldTime">
            <summary>Gets or sets the fieldTime attribute.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.CanMove">
            <summary>Gets or sets a value indicating whether or not
            the robot is allowed to move.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.IsAutonomous">
            <summary>Gets or sets a value indicating whether or not
            the robot is in autonomous mode.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.IsBlue">
            <summary>Gets or sets a value indicating whether or not
            the robot is on the blue team.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.Analog">
            <summary>Gets or sets the analog data.</summary>
        </member>
        <member name="P:PiEAPI.IncomingData.Digital">
            <summary>Gets or sets the digital data.</summary>
        </member>
        <member name="T:PiEAPI.FieldItem">
            <summary>
            Represents a generic item on the field.
            </summary>
        </member>
        <member name="F:PiEAPI.FieldItem.InvalidIdOrType">
            <summary>
            Indicates an invalid or unknown GroupId or GroupType.
            Should not be used for any real FieldItem.
            Can be passed to FieldItem constructor if the GroupId and/or 
            GroupType of the FieldItem instance being constructed is unknown.
            </summary>
        </member>
        <member name="F:PiEAPI.FieldItem.PlusOneBox">
            <summary>
            A GroupType of this value corresponds to a "+1" box."
            </summary>
        </member>
        <member name="F:PiEAPI.FieldItem.TimesTwoBox">
            <summary>
            A GroupType of this value corresponds to a "*2" box."
            </summary>
        </member>
        <member name="M:PiEAPI.FieldItem.#ctor(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Create a new FieldItem with an item ID, group ID, and group type.
            </summary>
            <param name="itemId"> Unique ID differentiating this from all
            other FieldItems.</param>
            <param name="groupId">Indicates the group to which this
            FieldItem belongs.</param>
            <param name="groupType">Indicates the type of teh group to which
            this FieldItem belongs.</param>
        </member>
        <member name="M:PiEAPI.FieldItem.Equals(System.Object)">
            <summary>
            Check if this is equal to the given object,
            if it can be cast to a FieldItem.
            If it can't return false
            </summary>
            <param name="obj">object to compare to</param>
            <returns>whether they're equal</returns>
        </member>
        <member name="M:PiEAPI.FieldItem.Equals(PiEAPI.FieldItem)">
            <summary>
            Check if this is equal to the given FieldItem.
            </summary>
            <param name="item">Fielditem to compare to</param>
            <returns>whether they're equal</returns>
        </member>
        <member name="M:PiEAPI.FieldItem.GetHashCode">
            <summary>
            Returns a hash code for this object.
            Uses the ItemId, casted to an int.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="P:PiEAPI.FieldItem.ItemId">
            <summary>
            The ID number of the FieldItem.
            Can be up to 32 bits in length.
            </summary>
        </member>
        <member name="P:PiEAPI.FieldItem.GroupId">
            <summary>
            The ID number of the group to which this FieldItem belongs
            </summary>
        </member>
        <member name="P:PiEAPI.FieldItem.GroupType">
            <summary>
            The type of the group to which this FieldItem belongs.
            </summary>
        </member>
        <member name="T:PiEAPI.PN532Consts">
            <summary>
            This class holds various constants used by the NXP PN532.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.CommandFramePreamble">
            <summary>
            0th element of a normal command frame.
            It always consists of this preamble.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.CommandFrameStart1">
            <summary>
            1st element of a normal command frame.
            It always consists of the first half of the start code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.CommandFrameStart2">
            <summary>
            2nd element of a normal command frame.
            It always consists of the second half of the start code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.CommandFrameToBoard">
            <summary>
            5th element of a normal command frame.
            When sent from the Panda to the Board,
            it always consists of this Type-of-Frame Identifier, or TFI.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.CommandFramePostamble">
            <summary>
            Last element of a normal command frame.
            It always consists of this postamble.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.GetFirmwareVersion">
            <summary>
            Ask the Board for the version of its embedded firmware.
            This is used here for debugging purposes.
            This is its command code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.GetGeneralStatus">
            <summary>
            Ask the Board for its general status.
            This is used here for debugging purposes.
            This is its command code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.SamConfig">
            <summary>
            Selects an operating mode.
            This is its command code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.SamConfigMode">
            <summary>
            First parameter of the SamConfiguration command.
            It specifies the mode that the board should enter.
            We set it to Normal Mode,
            which is the default operating mode according to the Data Sheet.
            This instructs it to act as a tag reader,
            and not as a tag itself.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.SamConfigTimeout">
            <summary>
            Second parameter of the SamConfiguration command.
            It specifies the timeout for a mode that is unused by us
            (in which the board acts like an NFC card).
            This parameter is optional and unused, but we specify it
            only in order to specify the next parameter.
            We set the timeout to 0.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.SamConfigIrq">
            <summary>
            Third parameter of the SamConfiguration command.
            It specifies whether the IRQ pin is controlled by the board.
            We specify that the board should control the IRQ,
            so we can use it to detect when it has a response prepared.
            This saves us the effort of repeatedly polling the board
            for this information.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.SamConfigOutput">
            <summary>
            Expected first element of the data section of the response packet
            sent from the Board to the Panda, as a response to a 
            SamConfiguration command.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfig">
            <summary>
            Configure different Board settings.
            This is its command code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfigMaxRetries">
            <summary>
            First parameter of the RFConfig command.
            Define the number of retries that the Board will use in each of
            the situations described in the following parameter bytes.
            We are only interested in MxRtyPassiveActivation, but we must
            specify all three sub-paramaters, so for the other two we use their
            default values.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfigMxRtyAtr">
            <summary>
            First sub-parameter of the RFConfig command
            with the RfConfigMaxRetries config item selection.
            It specifies the number of times that the Board will retry to send
            the ATR_REQ in case of incorrect reception of ATR_RES.
            This is the default value, as we do not care about this.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfigMxRtyPsl">
            <summary>
            Second sub-parameter of the RFConfig command
            with the RfConfigMaxRetries config item selection.
            It specfies the number of times that retries will happen under
            NFC-IP1 and ISO/IEC 14443-3 standards. We don't use either
            (we use ISo/IEC 14443A), so we don't care about this,
            so this is the default value.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfigMxRtyPassiveActivation">
            <summary>
            Third sub-parameter of the RFConfig command
            with the RfConfigMaxRetries config item selection.
            It specifies the number of times that the Board will try to
            activate a target in the ListPassiveTarget command. The default
            value of this is 0xFF, which means to retry eternally.
            We don't want this as we don't always know if there is a tag
            nearby to activate. We set it to 4 tries instead.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RfConfigOutput">
            <summary>
            Expected first element of the data section of the response packet
            sent from the Board to the Panda, as a response to a 
            RfConfig command. 
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ListPassiveTarget">
            <summary>
            Detects as many tag targets (up to a specified maximum) as possible
            that are in Passive Mode.
            This is its command code.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ListPassiveTargetMaxTg">
            <summary>
            First Parameter of the ListPassiveTarget command.
            It specifies the maximum number of targets to be initialized
            by the board. The Board can handle a maximum of 2 at once.
            We choose to limit this number to 1, for simplicity.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ListPassiveTargetBrTy">
            <summary>
            Second Parameter of the ListPassiveTarget command.
            It specifies the baud rate and modulation type
            to be used during the initialization of the target(s).
            We are using 106kbps Type A (ISO/IEC 14443 Type A).
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ListPassiveTargetOutput">
            <summary>
            Expected first element of the data section of the response packet
            sent from the Board to the Panda, as a response to a 
            ListPassiveTarget command.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ListPassiveTargetActivated">
            <summary>
            Second element of the data section of the response packet
            to a ListPassiveTarget is variable.
            If a target has been activated, the element in question
            will equal this value (since we have limited the number
            of activatable tags to 1 per scan).
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.Release">
            <summary>
            Erase all information stored about a specified tag.
            This will cause the tag to be elegible for re-activation.
            This is necessary because tags that are still in range but already
            activated will not be re-activated, and thus will not return uid
            in response to a ListPassiveTarget command, which is being used
            to detect cards.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ReleaseAllTags">
            <summary>
            First parameter of the Release command.
            It specifies the logical number of the tag to be forgotten.
            We are only going to be activating 1 card at a time, but for
            simplicity we specify that information about all tags be erased.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ReleaseOutput">
            <summary>
            Expected first element of the data section of the response packet
            sent from the Board to the Panda, as a response to a 
            Release command.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.ReleaseOutputSuccess">
            <summary>
            Expected second element of the data section of the response packet
            sent from the Board to the Panda, as a response to a 
            Release command. It indicates that tags were successfully released.
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.StatusRead">
            <summary>
            Panda polls board for response readiness
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.DataWrite">
            <summary>
            Panda writes command to board
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.DataRead">
            <summary>
            Panda requests readied response
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RespReady">
            <summary>
            Board has a response packet prepared
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.RespNotReady">
            <summary>
            Board does not have a response packet prepared
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.AckFrame">
            <summary>
            Indicate successful reception of previous response frame
            </summary>
        </member>
        <member name="F:PiEAPI.PN532Consts.NackFrame">
            <summary>
            Indicate unsuccessful reception of previous response frame
            </summary>
        </member>
        <member name="T:PiEAPI.PreemptibleTimer">
            <summary>
            A timer that keeps track of its own thread and the amount of time that
            it has been alive, so a watchdog can make sure it isn't taking too
            long to execute.
            Important useage note: This is a bunch of extension methods for the
            Timer class; this means that if you're in the PiEAPI namespace, any
            Timer object will have access to these methods (i.e. there's no need
            to create a WatchedTimer object ever, just make a normal Timer and
            you'll be able to use the methods defined here.)  This is also the
            reason literally everything is static in this class, as C# requires
            that you do that for extension methods.
            </summary>
        </member>
        <member name="M:PiEAPI.PreemptibleTimer.AbortWatchedThread(System.Threading.Timer)">
            <summary>
            Aborts the Timer's thread.  The Timer itself may still need
            to be disposed of, but that functionality already exists
            in Timer.Dispose()
            </summary>
            <param name="watchTimer">
            This is what makes the extension method for Timer.
            </param>
        </member>
        <member name="M:PiEAPI.PreemptibleTimer.StartWatchdogStopwatch(System.Threading.Timer)">
            <summary>
            Starts the Timer's Stopwatch.  This should be done immediately
            after the Timer itself is started.
            </summary>
            <param name="watchTimer">
            This is what makes the extension method for Timer.
            </param>
        </member>
        <member name="M:PiEAPI.PreemptibleTimer.GetWatchdogStopwatch(System.Threading.Timer)">
            <summary>
            Returns the Timer's Stopwatch.  This is necessary because
            WatchTimerStopwatch is a static object, and thus you cannot access
            it otherwise.
            </summary>
            <param name="watchTimer">
            This is what makes the extension method for Timer.
            </param>
            <returns>
            The Timer's Stopwatch.
            </returns>
        </member>
        <member name="P:PiEAPI.PreemptibleTimer.WatchedThread">
            <summary>
            Gets or sets the Timer's thread.
            </summary>
        </member>
        <member name="P:PiEAPI.PreemptibleTimer.WatchTimerStopwatch">
            <summary>
            Gets or sets a Stopwatch that represents how long the Timer has
            been active.
            </summary>
        </member>
        <member name="T:PiEAPI.Supervisor">
            <summary>
            The Supervisor class starts and manages threads.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.RobotWaitTime">
            <summary>
            The wait time (period) value for the robot supervisor thread,
            in milliseconds.
            Specify zero (0) to indicate that this thread should be suspended
            to allow other waiting threads to execute.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.TeleoperatedWaitTime">
            <summary>
            The wait time (period) value for the teleop timer,
            in milliseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.AutonomousWaitTime">
            <summary>
            The wait time (period) value for the autonomous timer,
            in milliseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.WriteWaitTime">
            <summary>
            The wait time (period) value for the Write timer,
            in milliseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.RadioOutWaitTime">
            <summary>
            The wait time (period) value for the Radio Out timer,
            in milliseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.ReadWaitTime">
            <summary>
            The wait time (period) value for the Read timer, in milliseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.teleoperatedTimer">
            <summary>
            Timer that controls teleop code.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.autonomousTimer">
            <summary>
            Timer that controls autonomous code.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.writeTimer">
            <summary>
            Timer that controls Write code
            (i.e. writing values to actuators and the radio.)
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.radioOutTimer">
            <summary>
            Timer that controls Radio Out code
            (i.e. reading sensor values and radio data.)
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.readTimer">
            <summary>
            Timer that controls Read code
            (i.e. reading sensor values and radio data.)
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.student">
            <summary>
            The student code to run.  StudentCode implements RobotCode, which
            is basically a wrapper class that allows us to do threading in
            Supervisor.cs while keeping the Main method in StudentCode.cs.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.robot">
            <summary>
            The robot on which to run the code.
            </summary>
        </member>
        <member name="F:PiEAPI.Supervisor.checkSpawnTeleoperated">
            <summary>
            Boolean to check if we need to spawn the teleop timer,
            i.e. if we switch from autonomous to teleoperated state.
            This should be set to true if we want to spawn teleoperatedTimer
            the next time the autonomous state changes, and false otherwise.
            </summary>
        </member>
        <member name="M:PiEAPI.Supervisor.#ctor(PiEAPI.RobotCode)">
            <summary>
            Constructor to be called by Student Code.
            Creates the radio's and student code's threads.
            </summary>
            <param name="student">The RobotCode instance that is created in
            StudentCode.cs</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunCode">
            <summary>
            Begins running the threads, and then runs the robot thread
            indefinitely.
            </summary>
        </member>
        <member name="M:PiEAPI.Supervisor.CheckAutonomousState">
            <summary>
            Thread management function for autonomous and teleop
            threads.
            This is how we make sure only one of those two threads is running
            at any given time.
            </summary>
        </member>
        <member name="M:PiEAPI.Supervisor.RunTeleoperatedTimer(System.Object)">
            <summary>
            Continually run student teleoperated code with yielding.
            This is the method for the timer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunAutonomousTimer(System.Object)">
            <summary>
            Continually run student autonomous code with yielding.
            This is the method for the timer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunDisabledTeleoperatedTimer(System.Object)">
            <summary>
            Continually run student disabled teleoperated code with yielding.
            This is the method for the timer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunDisabledAutonomousTimer(System.Object)">
            <summary>
            Continually run student disabled autonomous code with yielding.
            This is the method for the timer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunWrite(System.Object)">
            <summary>
            Continually write data to the actuator classes and the radio
            with yielding.  This is the method for the timer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunRadioOut(System.Object)">
            <summary>
            Send telemetry to PiEMOS
            </summary>
            <param name="stateInfo">stateInfo contains information about
            the state of the timer. We don't use this right now.</param>
        </member>
        <member name="M:PiEAPI.Supervisor.RunRead(System.Object)">
            <summary>
            Continually read data from the sensor classes and the radio
            with yielding. This is the method for the timer.
            Also updates the BatteryBuzzer.
            </summary>
            <param name="stateInfo">stateInfo contains information about the
            state of the timer that is required to be passed to the Callback.
            We currently do not use this parameter.</param>
        </member>
        <member name="P:PiEAPI.Supervisor.Robot">
            <summary>
            Gets the robot controlled by this student code.
            </summary>
        </member>
        <member name="T:PiEAPI.MicroMaestro">
            <summary>
            This is the servocontroller being used. It supports up to 6 servos at
            once, each independently controlled.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.AbsoluteMinPWM">
            <summary>
            Absolute minimum PWM value supported by the MicroMaestro serial
            protocol. Units are in quarter-microseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.AbsoluteMaxPWM">
            <summary>
            Absolute maximum PWM value supported by the MicroMaestro serial
            protocol. Units are in quarter-microseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.PortNumber">
            <summary>
            The port that the board is connected to on the robot. COM2 is the
            default value.
            TODO(felixli): ask about auto assigning ports
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.port">
            <summary>
            The communication port opened on the robot. This facilitates all
            data transfer to and from the servos.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.deviceNum">
            <summary>
            The address of the servo controller that must be referenced for
            any transaction. This is to support daisy chaining of servo
            controllers in case more than 6 are needed.
            </summary>
        </member>
        <member name="M:PiEAPI.MicroMaestro.#ctor(PiEAPI.Robot,System.UInt16)">
            <summary>
            Initializes an object of class MicroMaestro. This object will
            abstract communication between the user and servos.
            </summary>
            <param name="robot">The robot that the board is connected
            to.</param>
            <param name="deviceAdd">The unique address identifier of the
            MicroMaestro.</param>
        </member>
        <member name="M:PiEAPI.MicroMaestro.#ctor(PiEAPI.Robot)">
            <summary>
            A default constructor for the MicroMaestro. Defaults the device
            address to 1.
            </summary>
            <param name="robot">Same as above.</param>
        </member>
        <member name="M:PiEAPI.MicroMaestro.SetServoTarget(PiEAPI.MicroMaestro.Pins,System.Int32)">
            <summary>
            Special method to set a new servo target.
            </summary>
            <param name="channel">Defines which servo to send the command
            to.</param>
            <param name="target">Defines the value to be sent to the servo
            as its target angle.</param>
        </member>
        <member name="M:PiEAPI.MicroMaestro.SetServoSpeed(PiEAPI.MicroMaestro.Pins,System.Int32)">
            <summary>
            Special method to set a new servo speed.
            </summary>
            <param name="channel">Defines which servo to send the command
            to.</param>
            <param name="speed">Defines the value to be sent to the servo
            as its speed in pwm/s.</param>
        </member>
        <member name="M:PiEAPI.MicroMaestro.GetCurrentPosition(PiEAPI.MicroMaestro.Pins)">
            <summary>
            NOT IMPLEMENTED
            Reads the current pwm value(i.e. current angle) reported by the
            servo.
            </summary>
            <param name="channel">Defines which servo needs to be read.</param>
            <returns>The value as reported by the servo.</returns>
        </member>
        <member name="M:PiEAPI.MicroMaestro.SetServoProperty(PiEAPI.MicroMaestro.Pins,PiEAPI.MicroMaestro.Property,System.Int32)">
            <summary>
            A general method to send commands to a specific servo attached to
            the MicroMaestro.
            </summary>
            <param name="channel">Defines which servo to send the command
            to.</param>
            <param name="property">Defines which property is to be set.</param>
            <param name="value">Defines the value to set the property
            to.</param>
        </member>
        <member name="T:PiEAPI.MicroMaestro.Pins">
            <summary>
            An abstraction to assist in assigning servos their correct channel.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin0">
            <summary>
            Channel 0.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin1">
            <summary>
            Channel 1.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin2">
            <summary>
            Channel 2.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin3">
            <summary>
            Channel 3.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin4">
            <summary>
            Channel 4.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Pins.Pin5">
            <summary>
            Channel 5.
            </summary>
        </member>
        <member name="T:PiEAPI.MicroMaestro.Property">
            <summary>
            A list of byte codes that tells the MicroMaestro what value we
            want to set or read.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Property.Target">
            <summary>
            Code to set the target of the servo.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Property.Speed">
            <summary>
            Code to set the speed of the servo.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Property.Acceleration">
            <summary>
            Code to set the acceleration of the servo.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Property.Position">
            <summary>
            Code to read the current position.
            </summary>
        </member>
        <member name="F:PiEAPI.MicroMaestro.Property.GetState">
            <summary>
            Code to tell whether the servo is still in motion.
            </summary>
        </member>
        <member name="T:PiEAPI.MPU6050">
            <summary>
            Allows interaction with the sensor on the Robot.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.clockRateKHZ">
            <summary>
            Holds the clock rate for the MPU_6050 at 400 kiloHertz.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.smplrtDiv">
            <summary>
            Byte array that holds the register of the sample rate and sets the sample rate to 8000/1+7 = 1000Hz.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.config">
            <summary>
            Byte array that holds the register of the configuration register and disables FSync with 256Hz DLPF.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroConfig">
            <summary>
            Byte array that holds the register of gyro configuration and disables gyro self tests.
            Makes the scale of measurement 2000 degrees/s.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelConfig">
            <summary>
            Byte array that holds the register of the accelerometer configuration. Disables accelerometer
            self tests and sets the scale of measurement +-16g, no DHPF.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.freeFallthr">
            <summary>
            Byte array that holds the free fall threshold register and sets threshold of |0mg|.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.freeFallDur">
            <summary>
            Byte array that holds the free fall duration register and sets duration limit of 0
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.motionThresh">
            <summary>
            Byte array that holds the motion threshold register and sets it to 0mg.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.motionDur">
            <summary>
            Byte array that holds the register for motion duration and sets the value 0s.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.zeroMotionThresh">
            <summary>
            Byte array holds the zero motion threshold register and the value we are setting it to.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.zeroMotionDur">
            <summary>
            Byte array holds the zero motion duration threshold register and the value we are setting it to.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.fifoEn">
            <summary>
            Byte array that holds the register for the FIFO buffer and disables sensor output.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cMasterCtrl">
            <summary>
            Byte array that holds the register for AUX I2C setup and sets AUX I2C to single master
            control, plus other config.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSLV0Add">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv0Reg">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv0CTRL">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv1Add">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv1Reg">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv1CTRL">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv2Add">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv2Reg">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv2CTRL">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv3Add">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv3Reg">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv3CTRL">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv4Add">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv4Reg">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv4DO">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv4CTRL">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv4DI">
            <summary>
            Byte array that holds register for AUX I2C slave devices and disables the slaves.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.intPinConfig">
            <summary>
            Byte array holds register for internal pin configuration and sets up the INT pin and AUX I2C
            pass through.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.intEnable">
            <summary>
            Byte array holds register for internal enable and enables data ready interrupt.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv0DO">
            <summary>
            Byte array for I2C slave devices and disables slave.  Slave out, don't care.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv1DO">
            <summary>
            Byte array for I2C slave devices and disables slave.  Slave out, don't care.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv2DO">
            <summary>
            Byte array for I2C slave devices and disables slave.  Slave out, don't care.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cSlv3DO">
            <summary>
            Byte array for I2C slave devices and disables slave.  Slave out, don't care.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.i2cmostDelayCTRL">
            <summary>
            Byte array that sets up more slave configuration.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.signalPathReset">
            <summary>
            Byte arrays that hold register for signal path and resets sensor signal paths.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.motionDetectCTRL">
            <summary>
            Byte array that holds register for motion detection control and sets it up.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.userCTRL">
            <summary>
            Byte array that holds registers for user control and disables FIFO, AUX I2C, FIFO and I2C reset bits to 0.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.pwrMgmt1">
            <summary>
            Byte array that holds register for Power Management 1 and sets clock source to gyro reference w/ PLL.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.pwrMgmt2">
            <summary>
            Byte array holds register for power management 2 and controls frequency of wakeups in accelerometer
            low power mode plus the sensor standby modes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.fifoRW">
            <summary>
            Byte array holds register of FIFO R/W and sets up data transfer to and from the FIFO buffer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.configActions">
            <summary>
            Initializes the I2C transactions responsible for the MPU6050 setup and configuration.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.configA">
            <summary>
            Holds the configuration instance for the sensor.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.axbytesHigh">
            <summary>
            Holds the 1 byte of data read from x high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.aybytesHigh">
            <summary>
            Holds the 1 byte of data read from accelerometer y high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.azbytesHigh">
            <summary>
            Holds the 1 byte of data read from accelerometer z high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.azbytesLow">
            <summary>
            Holds the 1 byte of data read from accelerometer z low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.axbytesLow">
            <summary>
            Holds the 1 byte of data read from accelerometer x low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.aybytesLow">
            <summary>
            Holds the 1 byte of data read from accelerometer y low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gxbytesHigh">
            <summary>
            Holds the 1 byte of data read from gyro x high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gybytesHigh">
            <summary>
            Holds the 1 byte of data read from gyro y high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gzbytesHigh">
            <summary>
            Holds the 1 byte of data read from gyro z high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gxbytesLow">
            <summary>
            Holds the 1 byte of data read from gyro x low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gybytesLow">
            <summary>
            Holds the 1 byte of data read from gyro y low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gzbytesLow">
            <summary>
            Holds the 1 byte of data read from gyro z low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelxActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the accelerometer values along
            the x-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelyActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the accelerometer values along
            the y-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelzActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the accelerometer values along
            the z-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroxActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the gyro values along the x-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroyActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the gyro values along the x-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyrozActions">
            <summary>
            Holds the instance of the I2C transactions that allow read the gyro values along the x-axis.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.robotObj">
            <summary>
            Robot object that represents the robot.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.deviceAddress">
            <summary>
            Holds the address of MPU_6050
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroXOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroYOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroZOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelXOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelYOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelZOffset500sum">
            <summary>
            Variable used to hold the values used to create the offset for accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroXOffset">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroYOffset">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.gyroZOffset">
            <summary>
            Variable used to hold the values used to create the offset for the gyroscopes.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelXOffset">
            <summary>
            Variable used to hold the offset of the accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelYOffset">
            <summary>
            Variable used to hold the offset of the accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.accelZOffset">
            <summary>
            Variable used to hold the offset of the accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.deviceAdd">
            <summary>
            The register that holds the I2C device address for the MPU6050.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.deviceData">
            <summary>
            The byte array that holds the byte read from the register holding the device address.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.deviceAddressAction">
            <summary>
            The instance of the I2C transaction that holds the transaction that checks the I2C device address.
            </summary>
        </member>
        <member name="M:PiEAPI.MPU6050.#ctor(PiEAPI.Robot)">
            <summary>
            Initializes a new instance of the MPU6050 class, adds it to the
            global list of sensors.
            </summary>
            <param name="robo"> Robot created in student code.</param>
        </member>
        <member name="M:PiEAPI.MPU6050.Update">
            <summary>
            Reads the data taken by the sensor. Updates the values continually.
            </summary>
        </member>
        <member name="M:PiEAPI.MPU6050.GetValues">
            <summary>
            Retrieves the acceleration values and gyroscope values and returns as integer array.
            </summary>
            <returns>Three acceleration and gyroscope values, respectively and in x, y, z order.</returns>
        </member>
        <member name="M:PiEAPI.MPU6050.AddToGlobalList">
            <summary>
            Adds sensor to global list of sensors.
            </summary>
        </member>
        <member name="M:PiEAPI.MPU6050.MPU6050_Test_I2C">
            <summary>
            Tests the sensor's connection with the I2C by checking the I2C device address.
            </summary>
        </member>
        <member name="M:PiEAPI.MPU6050.Callibrate_Gyros">
            <summary>
            Method used to set up the basis against which the gyroscope is measured.
            Samples 1000 times with one millisecond delays between sampling. Sets the
            value for the gyroscope data to be compared against.
            </summary>
        </member>
        <member name="M:PiEAPI.MPU6050.Setup_MPU6050">
            <summary>
            Used to setup the MPU6050 using the aforementioned configuration values and byte arrays.
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.XAccel">
            <summary>
            Gets the integer value collected by the accelerometer along the x-axis.  Returns integer value from -100 to 100
            such that 1 g is equal to an increment of 6.25. (The number the raw is being multiplied by is determined by dividing 6.25 by
            the sensor conversion of 2048 LSB/g.)
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.YAccel">
            <summary>
            Gets the variable as the integer value collected by the accelerometer along the y-axis. Returns integer value from -100 to 100
            such that 1 g is equal to an increment of 6.25. (The number the raw is being multiplied by is determined by dividing 6.25 by
            the sensor conversion of 2048 LSB/g.)
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.ZAccel">
            <summary>
            Gets the variable as the integer value collected by the accelerometer along the z-axis. Returns integer value from -100 to 100
            such that 1 g is equal to an increment of 6.25. (The number the raw is being multiplied by is determined by dividing 6.25 by
            the sensor conversion of 2048 LSB/g.)
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.XGyro">
            <summary>
            Gets the variable as the integer value collected by the gyro along the x-axis. Returns integer value from -100 to 100 such that
            1 degree per second is equal to an increment of 0.05. (The number the raw is being multiplied by is determined by
            dividing 0.05 by the sensor conversion of 16.4 LSB/ deg per second.)
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.YGyro">
            <summary>
            Gets the variable as the integer value collected by the gyro along the y-axis. Returns integer value from -100 to 100 such that
            1 degree per second is equal to an increment of 0.05.  (The number the raw is being multiplied by is determined by
            dividing 0.05 by the sensor conversion of 16.4 LSB/ deg per second.)
            </summary>
        </member>
        <member name="P:PiEAPI.MPU6050.ZGyro">
            <summary>
            Gets the variable as the integer value collected by the gyro along the z-axis. Returns integer value from -100 to 100 such that
            1 degree per second is equal to an increment of 0.05. (The number the raw is being multiplied by is determined by
            dividing 0.05 by the sensor conversion of 16.4 LSB/ deg per second.)
            </summary>
        </member>
        <member name="T:PiEAPI.MPU6050.RegisterMap">
            <summary>
            The following variables hold the register values of the MPU6050.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ADDRESS_AD0_LOW">
            <summary>
            ADO register low.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ADDRESS_AD0_HIGH">
            <summary>
            ADO register high.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DEFAULT_ADDRESS">
            <summary>
            Default MPU6050 address.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_XG_OFFS_TC">
            <summary>
            X-axis gyro offset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_YG_OFFS_TC">
            <summary>
            Y axis gyro offset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZG_OFFS_TC">
            <summary>
            Z-axis gyro offset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_X_FINE_GAIN">
            <summary>
            X axis fine gain.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_Y_FINE_GAIN">
            <summary>
            Y axis fine gain.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_Z_FINE_GAIN">
            <summary>
            Z axis fine gain.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_XA_OFFS_H">
            <summary>
            X-axis accelerometer offset high.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_XA_OFFS_L_TC">
            <summary>
            X-axis accelerometer offset low.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_YA_OFFS_H">
            <summary>
            Y-axis accelerometer offset high.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_YA_OFFS_L_TC">
            <summary>
            Y-axis accelerometer offset low.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZA_OFFS_H">
            <summary>
            Z-axis accelerometer offset high.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZA_OFFS_L_TC">
            <summary>
            Z-axis accelerometer offset low.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_XG_OFFS_USRH">
            <summary>
            X-axis gyro USRH.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_XG_OFFS_USRL">
            <summary>
            X-axis gyro offset USRL.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_YG_OFFS_USRH">
            <summary>
            Y-axis gyro offset USRH.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_YG_OFFS_USRL">
            <summary>
            Y-axis gyro offset USRL.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZG_OFFS_USRH">
            <summary>
            Z-axis gyro offset USRH.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZG_OFFS_USRL">
            <summary>
            Z-axis gyro offset USRL.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_SMPLRT_DIV">
            <summary>
            Sample rate divider register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_CONFIG">
            <summary>
            Configuration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_CONFIG">
            <summary>
            Gyroscope configuration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_CONFIG">
            <summary>
            Accelerometer configuration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FF_THR">
            <summary>
            Free fall threshold register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FF_DUR">
            <summary>
            Free fall duration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MOT_THR">
            <summary>
            Motion threshold register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MOT_DUR">
            <summary>
            Motion duration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZRMOT_THR">
            <summary>
            Zero motion threshold register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ZRMOT_DUR">
            <summary>
            Zero motion duration register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FIFO_EN">
            <summary>
            FIFO enable register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_MST_CTRL">
            <summary>
            I2C master control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV0_ADDR">
            <summary>
            Aux I2C Slave 0 address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV0_REG">
            <summary>
            Aux I2C Slave 0 regulate register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV0_CTRL">
            <summary>
            Aux I2C Slave 0 control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV1_ADDR">
            <summary>
            Aux I2C Slave 1 address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV1_REG">
            <summary>
            Aux I2C slave 1 regulate register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV1_CTRL">
            <summary>
            Aux I2C Slave 1 control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV2_ADDR">
            <summary>
            Aux I2C Slave 2 address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV2_REG">
            <summary>
            Aux I2C Slave 2 regulate register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV2_CTRL">
            <summary>
            Aux I2C Slave 2 control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV3_ADDR">
            <summary>
            Aux I2C Slave 3 address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV3_REG">
            <summary>
            Aux I2C Slave 3 regulate register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV3_CTRL">
            <summary>
            Aux I2C Slave 3 control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV4_ADDR">
            <summary>
            Aux I2C Slave 4 address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV4_REG">
            <summary>
            Aux I2C slave 4 regulate register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV4_DO">
            <summary>
            Aux I2C Slave 4 DO register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV4_CTRL">
            <summary>
            Aux I2C Slave 4 Control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV4_DI">
            <summary>
            Aux I2C Slave 4 DI.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_MST_STATUS">
            <summary>
            I2C master status register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_INT_PIN_CFG">
            <summary>
            Internal pin configure.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_INT_ENABLE">
            <summary>
            Internal enable register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_DMP_INT_STATUS">
            <summary>
            DMP internal status register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_INT_STATUS">
            <summary>
            Internal status register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_XOUT_H">
            <summary>
            Accelerometer x-axis out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_XOUT_L">
            <summary>
            Accelerometer x-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_YOUT_H">
            <summary>
            Accelerometer y-axis out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_YOUT_L">
            <summary>
            Accelerometer y-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_ZOUT_H">
            <summary>
            Accelerometer z-axis out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_ACCEL_ZOUT_L">
            <summary>
            Accelerometer z-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_TEMP_OUT_H">
            <summary>
            Temperature out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_TEMP_OUT_L">
            <summary>
            Temperature out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_XOUT_H">
            <summary>
            Gyro x-axis high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_XOUT_L">
            <summary>
            Gyro x-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_YOUT_H">
            <summary>
            Gyro y-axis out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_YOUT_L">
            <summary>
            Gyro y-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_ZOUT_H">
            <summary>
            Gyro z-axis out high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_GYRO_ZOUT_L">
            <summary>
            Gyro z-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_00">
            <summary>
            External sensor data 00 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_01">
            <summary>
            External sensor data 01 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_02">
            <summary>
            External sensor data 02 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_03">
            <summary>
            External sensor data 03 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_04">
            <summary>
            External sensor data 04 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_05">
            <summary>
            External sensor data 05 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_06">
            <summary>
            External sensor data 06 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_07">
            <summary>
            External sensor data 07 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_08">
            <summary>
            External sensor data 08 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_09">
            <summary>
            External sensor data 09 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_10">
            <summary>
            External sensor data 10 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_11">
            <summary>
            External sensor data 11 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_12">
            <summary>
            External sensor data 12 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_13">
            <summary>
            External sensor data 13 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_14">
            <summary>
            External sensor data 14 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_15">
            <summary>
            External sensor data 15 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_16">
            <summary>
            External sensor data 16 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_17">
            <summary>
            External sensor data 17 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_18">
            <summary>
            External sensor data 18 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_19">
            <summary>
            External sensor data 19 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_20">
            <summary>
            External sensor data 20 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_21">
            <summary>
            External sensor data 21 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_22">
            <summary>
            External sensor data 22 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_EXT_SENS_DATA_23">
            <summary>
            External sensor data 23 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MOT_DETECT_STATUS">
            <summary>
            Motion detection status register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV0_DO">
            <summary>
            AUX I2C slave 0 DO register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV1_DO">
            <summary>
            AUX I2C slave 1 DO register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV2_DO">
            <summary>
            AUX I2C slave 2 DO register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_SLV3_DO">
            <summary>
            AUX I2C slave 3 DO register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_I2C_MST_DELAY_CTRL">
            <summary>
            AUX I2C Master delay control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_SIGNAL_PATH_RESET">
            <summary>
            Signal path reset register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MOT_DETECT_CTRL">
            <summary>
            Motion detect control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_USER_CTRL">
            <summary>
            User control register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_PWR_MGMT_1">
            <summary>
            Power management 1 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_PWR_MGMT_2">
            <summary>
            Power management 2 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_BANK_SEL">
            <summary>
            Bank register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MEM_START_ADDR">
            <summary>
            Memory start address register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_MEM_R_W">
            <summary>
            Memory read write register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_DMP_CFG_1">
            <summary>
            Dampening configuration 1 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_DMP_CFG_2">
            <summary>
            Dampening configuration 2 register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FIFO_COUNTH">
            <summary>
            FIFO count high register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FIFO_COUNTL">
            <summary>
            FIFO count register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_FIFO_R_W">
            <summary>
            FIFO read write register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_RA_WHO_AM_I">
            <summary>
            Who Am I register holds device address for MPU6050.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_TC_PWR_MODE_BIT">
            <summary>
            Power mode bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_TC_OFFSET_BIT">
            <summary>
            TC offset bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_TC_OFFSET_LENGTH">
            <summary>
            TC offset length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_TC_OTP_BNK_VLD_BIT">
            <summary>
            Bank bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_VDDIO_LEVEL_VLOGIC">
            <summary>
            Voltage level.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_VDDIO_LEVEL_VDD">
            <summary>
            Voltage level.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CFG_EXT_SYNC_SET_BIT">
            <summary>
            Configure external sync set bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CFG_EXT_SYNC_SET_LENGTH">
            <summary>
            Configure external sync set length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CFG_DLPF_CFG_BIT">
            <summary>
            Configure bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CFG_DLPF_CFG_LENGTH">
            <summary>
            Configuration length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_DISABLED">
            <summary>
            External sync disabled.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_TEMP_OUT_L">
            <summary>
            External sync temperature out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_GYRO_XOUT_L">
            <summary>
            External sync gyroscope x-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_GYRO_YOUT_L">
            <summary>
            External sync gyroscope y-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_GYRO_ZOUT_L">
            <summary>
            External sync z-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_ACCEL_XOUT_L">
            <summary>
            External sync accelerometer x-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_ACCEL_YOUT_L">
            <summary>
            External sync acceleration y-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_EXT_SYNC_ACCEL_ZOUT_L">
            <summary>
            External sync accelerometer z-axis out low register.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_256">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_188">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_98">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_42">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_20">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_10">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DLPF_BW_5">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GCONFIG_FS_SEL_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GCONFIG_FS_SEL_LENGTH">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GYRO_FS_250">
            <summary>
            Gyro sensitivity 250 degrees per second.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GYRO_FS_500">
            <summary>
            Gyro sensitivity 500 degrees per second.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GYRO_FS_1000">
            <summary>
            Gyro sensitivity 1000 degrees per second.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_GYRO_FS_2000">
            <summary>
            Gyro sensitivity 2000 degrees per second.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_XA_ST_BIT">
            <summary>
            Configuration x-axis accelerometer bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_YA_ST_BIT">
            <summary>
            Configuration y-axis accelerometer bit length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_ZA_ST_BIT">
            <summary>
            Accelerometer z-axis bit configuration.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_AFS_SEL_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_AFS_SEL_LENGTH">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_ACCEL_HPF_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACONFIG_ACCEL_HPF_LENGTH">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACCEL_FS_2">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACCEL_FS_4">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACCEL_FS_8">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACCEL_FS_16">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_RESET">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_5">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_2P5">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_1P25">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_0P63">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DHPF_HOLD">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_TEMP_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_XG_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_YG_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ZG_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_ACCEL_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_SLV2_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_SLV1_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_SLV0_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MULT_MST_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WAIT_FOR_ES_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_SLV_3_FIFO_EN_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_MST_P_NSR_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_MST_CLK_BIT">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_MST_CLK_LENGTH">
            <summary>
            TODO: Find out what it means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_348">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_333">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_320">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_308">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_296">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_286">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_276">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_267">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_258">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_500">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_471">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_444">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_421">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_400">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_381">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_DIV_364">
            <summary>
            Master clock rate value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_RW_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_ADDR_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_ADDR_LENGTH">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_EN_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_BYTE_SW_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_REG_DIS_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_GRP_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_LEN_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV_LEN_LENGTH">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_RW_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_ADDR_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_ADDR_LENGTH">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_EN_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_INT_EN_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_REG_DIS_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_MST_DLY_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_I2C_SLV4_MST_DLY_LENGTH">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_PASS_THROUGH_BIT">
            <summary>
            Master pass through value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV4_DONE_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_LOST_ARB_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV4_NACK_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV3_NACK_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV2_NACK_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV1_NACK_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MST_I2C_SLV0_NACK_BIT">
            <summary>
            Slave configuration values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_INT_LEVEL_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_INT_OPEN_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_LATCH_INT_EN_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_INT_RD_CLEAR_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_FSYNC_INT_EN_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_I2C_BYPASS_EN_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCFG_CLKOUT_EN_BIT">
            <summary>
            Internal configuration value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTMODE_ACTIVEHIGH">
            <summary>
            Internal mode values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTMODE_ACTIVELOW">
            <summary>
            Internal mode values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTDRV_PUSHPULL">
            <summary>
            Internal drive push pull values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTDRV_OPENDRAIN">
            <summary>
            Internal drive open drain values.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTLATCH_50USPULSE">
            <summary>
            Internal latch pulse register or value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTLATCH_WAITCLEAR">
            <summary>
            Internal latch wait clear register or value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCLEAR_STATUSREAD">
            <summary>
            Internal clear status read register or value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTCLEAR_ANYREAD">
            <summary>
            Internal clear any read register or value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_FF_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_MOT_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_ZMOT_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_FIFO_OFLOW_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_I2C_MST_INT_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_PLL_RDY_INT_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_DMP_INT_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_INTERRUPT_DATA_RDY_BIT">
            <summary>
            Interrupt value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_5_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_4_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_3_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_2_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_1_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMPINT_0_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_XNEG_BIT">
            <summary>
            Motion x negative value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_XPOS_BIT">
            <summary>
            Motion x positive bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_YNEG_BIT">
            <summary>
            Motion y negative bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_YPOS_BIT">
            <summary>
            Motion y positive bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_ZNEG_BIT">
            <summary>
            Motion z negative bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_ZPOS_BIT">
            <summary>
            Motion z positive bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_MOTION_MOT_ZRMOT_BIT">
            <summary>
            Motion zero motion bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT">
            <summary>
            Delay control shadow bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT">
            <summary>
            Delay control I2C slave delay value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT">
            <summary>
            Delay control I2C slave delay value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT">
            <summary>
            Delay control I2C slave delay value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT">
            <summary>
            Delay control I2C slave delay value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT">
            <summary>
            Delay control I2C slave delay value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PATHRESET_GYRO_RESET_BIT">
            <summary>
            Path reset gyroscope reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PATHRESET_ACCEL_RESET_BIT">
            <summary>
            Path reset accelerometer reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PATHRESET_TEMP_RESET_BIT">
            <summary>
            Path reset temperature.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_ACCEL_ON_DELAY_BIT">
            <summary>
            Detect accelerometer on delay bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH">
            <summary>
            Detect accelerometer on delay length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_FF_COUNT_BIT">
            <summary>
            Detect free fall count bit.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_FF_COUNT_LENGTH">
            <summary>
            Detect free fall count length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_MOT_COUNT_BIT">
            <summary>
            Detect motion count bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_MOT_COUNT_LENGTH">
            <summary>
            Detect motion count length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_DECREMENT_RESET">
            <summary>
            Detect decrement reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_DECREMENT_1">
            <summary>
            Detect decrement reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_DECREMENT_2">
            <summary>
            Detect decrement reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DETECT_DECREMENT_4">
            <summary>
            Detect decrement reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_DMP_EN_BIT">
            <summary>
            User control enable value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_FIFO_EN_BIT">
            <summary>
            User control FIFO enable bit.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_I2C_MST_EN_BIT">
            <summary>
            User control I2C master enable.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_I2C_IF_DIS_BIT">
            <summary>
            User control I2C distribution.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_DMP_RESET_BIT">
            <summary>
            User control reset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_FIFO_RESET_BIT">
            <summary>
            User control FIFO reset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_I2C_MST_RESET_BIT">
            <summary>
            User control I2C master reset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_USERCTRL_SIG_COND_RESET_BIT">
            <summary>
            User control significant reset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_DEVICE_RESET_BIT">
            <summary>
            Power1 device reset.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_SLEEP_BIT">
            <summary>
            Power1 sleep.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_CYCLE_BIT">
            <summary>
            Power1 cycle bit value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_TEMP_DIS_BIT">
            <summary>
            Power1 temperature.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_CLKSEL_BIT">
            <summary>
            Power1 clock value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR1_CLKSEL_LENGTH">
            <summary>
            Power1 clock length value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_INTERNAL">
            <summary>
            Internal clock
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_PLL_XGYRO">
            <summary>
            X Gyroscope clock.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_PLL_YGYRO">
            <summary>
            Y Gyroscope clock.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_PLL_ZGYRO">
            <summary>
            Z gyroscope clock.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_PLL_EXT32K">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_PLL_EXT19M">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_CLOCK_KEEP_RESET">
            <summary>
            Clock reset value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_LP_WAKE_CTRL_BIT">
            <summary>
            Power2 wake control length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_LP_WAKE_CTRL_LENGTH">
            <summary>
            Power2 wake control length.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_XA_BIT">
            <summary>
            Power2 standby x axis accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_YA_BIT">
            <summary>
            Power2 standby y axis accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_ZA_BIT">
            <summary>
            Power2 standby z axis accelerometer.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_XG_BIT">
            <summary>
            Power2 standby x axis gyroscope.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_YG_BIT">
            <summary>
            Power2 standby y axis gyroscope.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_PWR2_STBY_ZG_BIT">
            <summary>
            Power2 standby z axis gyroscope.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WAKE_FREQ_1P25">
            <summary>
            Wake frequency value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WAKE_FREQ_2P5">
            <summary>
            Wake frequency value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WAKE_FREQ_5">
            <summary>
            Wake frequency value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WAKE_FREQ_10">
            <summary>
            Wake frequency value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_BANKSEL_PRFTCH_EN_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_BANKSEL_CFG_USER_BANK_BIT">
            <summary>
            Configure user bank value.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_BANKSEL_MEM_SEL_BIT">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_BANKSEL_MEM_SEL_LENGTH">
            <summary>
            TODO: Find out what this means.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WHO_AM_I_BIT">
            <summary>
            TODO: Find out what this is.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_WHO_AM_I_LENGTH">
            <summary>
            TODO: Find out what this is.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMP_MEMORY_BANKS">
            <summary>
            TODO: Find out what this is.
            </summary>
        </member>
        <member name="F:PiEAPI.MPU6050.RegisterMap.MPU6050_DMP_MEMORY_CHUNK_SIZE">
            <summary>
            TODO: Find out what this is.
            </summary>
        </member>
        <member name="T:PiEAPI.OutgoingData">
            <summary>
            Class to represent the outgoing data to send back to PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.OutgoingData.#ctor(System.Byte,System.Byte,System.Byte,System.Byte[],System.Boolean[])">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.OutgoingData"/> class.
            </summary>
            <param name="identByte">The identification byte to send.</param>
            <param name="rssiFeedback">The RSSI feedback.</param>
            <param name="batteryStatus">
            Battery status. 1 if buzzer connected and battery good, 0 otherwise.
            </param>
            <param name="analogData">
            The analog data to send.
            </param>
            <param name="digitalData">
            The digital data to send.
            </param>
        </member>
        <member name="M:PiEAPI.OutgoingData.GetData">
            <summary>
            Puts our data into a single array to send back to PiEMOS.
            </summary>
            <returns>The array of data to send.</returns>
        </member>
        <member name="P:PiEAPI.OutgoingData.Ident">
            <summary>Gets or sets the ident byte.</summary>
        </member>
        <member name="P:PiEAPI.OutgoingData.RssiFeedback">
            <summary>Gets or sets the rssi feedback.</summary>
        </member>
        <member name="P:PiEAPI.OutgoingData.BatteryStatus">
            <summary>Gets or sets the battery status.</summary>
        </member>
        <member name="P:PiEAPI.OutgoingData.Analog">
            <summary>Gets or sets the analog data.</summary>
        </member>
        <member name="P:PiEAPI.OutgoingData.Digital">
            <summary>Gets or sets the digital data.</summary>
        </member>
        <member name="T:PiEAPI.Servo">
            <summary>
            The properties common to all servos. This should be used as the
            superclass for any servos that are added to the robot.
            </summary>
        </member>
        <member name="P:PiEAPI.Servo.TargetRotation">
            <summary>
            The designated angle that the servo will try to maintain.
            Writes should change this value.
            </summary>
        </member>
        <member name="P:PiEAPI.Servo.AngularSpeed">
            <summary>
            Defines how quickly the servo will try to reach the targetRotation.
            </summary>
        </member>
        <member name="P:PiEAPI.Servo.Channel">
            <summary>
            This is the channel on the MicroMaestro that this servo
            occupies.
            </summary>
        </member>
        <member name="T:PiEAPI.ServoMotor">
            <summary>
            This is the default implementation of a servo on the robot. In
            particular, this servo was designed to be used with the
            MicroMaestro servocontroller.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.targetRotation">
            <summary>
            See Servo.TargetRotation.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.angularSpeed">
            <summary>
            See Servo.AngularSpeed. The MicroMaestro uses pwm/s as its speed
            so the conversion rate between the angle and pwm is the same for
            the speed. This variable will store the degrees/s, where a value
            of 0 is as fast as possible.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.controller">
            <summary>
            This represents the servocontroller board that this servo
            object belongs to.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.channel">
            <summary>
            This is the channel on the MicroMaestro that corresponds to this
            servo.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.changedTarget">
            <summary>
            To save transmission time, we only write values to the servo
            controller if there has been a change in the target angle.
            This denotes whether such a change has occurred.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.changedSpeed">
            <summary>
            To save transmission time, we only write values to the servo
            controller if there has been a change in the target speed.
            This denotes whether we have changed the speed.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.minPWM">
            <summary>
            The minimum PWM supported by the servo. This should correspond to
            the 0 position of the servo. Units are in quarter-microseconds.
            </summary>
        </member>
        <member name="F:PiEAPI.ServoMotor.maxPWM">
            <summary>
            The maximum PWM supported by the servo. This should correspond to
            the 100% position of the servo. Units are in quarter-microseconds.
            </summary>
        </member>
        <member name="M:PiEAPI.ServoMotor.#ctor(PiEAPI.Robot,PiEAPI.MicroMaestro,PiEAPI.MicroMaestro.Pins,System.Int32,System.Int32,System.Single)">
            <summary>
            Instantiates a new instance of the class ServoBase. This is the
            actuator object that all update and write commands use but all
            commands and values will be sent through the MicroMaestro class.
            </summary>
            <param name="robot">This is the robot that the servo is
            attached to.</param>
            <param name="controller">This is the MicroMaestro servo
            controller that the servo belongs to.</param>
            <param name="channel">The channel on the MicroMaestro this servo is
            attached to.</param>
            <param name="minPWM">The minimum PWM used by the servo. This value
            must be determined experimentally. Units are in
            quarter-microseconds.</param>
            <param name="maxPWM">The maximum PWM used by the servo. This value
            must be determined experimentally. Units are in
            quarter-microseconds.</param>
            <param name="speed">This is an optional initialization
            parameter to define the speed at which the servo seeks
            its target. By default, it is max speed, 0.</param>
        </member>
        <member name="M:PiEAPI.ServoMotor.#ctor(PiEAPI.Robot,PiEAPI.MicroMaestro,PiEAPI.MicroMaestro.Pins,System.Int32,System.Int32)">
            <summary>
            Same as above with default arguments.
            </summary>
            <param name="robot">Same robot as above.</param>
            <param name="controller">Same controller as above.</param>
            <param name="channel">Same channel as above.</param>
            <param name="minPWM">Same minPWM as above.</param>
            <param name="maxPWM">Same maxPWM as above.</param>
        </member>
        <member name="M:PiEAPI.ServoMotor.SetValues(System.Collections.ArrayList)">
            <summary>
            SetValues will let you set all Servo parameters at once. We use an
            arraylist to pass all the values to the method and then return the
            current state after applying all the parameters. This way, it is
            possible to verify the changes actually occurred. 
            </summary>
            <param name="state">The state you want the servo to be in.</param>
            <returns>The current state after applying all parameters.</returns>
        </member>
        <member name="M:PiEAPI.ServoMotor.GetValues">
            <summary>
            GetValues is simply a utility that can be used to ascertain
            all operating parameters that can be set.
            </summary>
            <returns>An arraylist containing all characteristic parameters
            of this servo.</returns>
        </member>
        <member name="M:PiEAPI.ServoMotor.Write">
            <summary>
            This communicates with the servo, telling it where to turn to, and
            how fast.
            </summary>
        </member>
        <member name="M:PiEAPI.ServoMotor.Kill">
            <summary>
            This should disable the servo completely. According to the
            MicroMaestro, sending a target of 0 will cease all communications
            with the servo.
            </summary>
        </member>
        <member name="M:PiEAPI.ServoMotor.Revive">
            <summary>
            This should be used after the servo has been killed. It will allow
            commands to be sent to the servo once more.
            </summary>
        </member>
        <member name="M:PiEAPI.ServoMotor.AngleToPWM(System.Single)">
            <summary>
            Servos use PWM values to determine their positions. We want to be
            able to set angles. So all inputs will be given in angles, and this
            will be used to convert those angles into PWM values to be output.
            </summary>
            <param name="angle">The input target angle desired.</param>
            <returns>The PWM value corresponding to the target angle.</returns>
        </member>
        <member name="M:PiEAPI.ServoMotor.PWMToAngle(System.Int32)">
            <summary>
            If we wish to be able to read information from the servo, we must
            be able to convert PWM values into angles. The servo controller
            will only send raw PWM numbers so to make it more human-readable,
            it must be converted back into degrees or radians.
            </summary>
            <param name="pwm">The PWM value returned from the servo.</param>
            <returns>The angle that corresponds to the PWM value.</returns>
        </member>
        <member name="M:PiEAPI.ServoMotor.GetPosition">
            <summary>
            GetPosition should read back the current PWM value the servo is
            using. Note that this could be an intermediate value if the
            servo is still in motion.
            </summary>
            <returns>The angle representing the current state of the servo,
            including in motion.</returns>
        </member>
        <member name="P:PiEAPI.ServoMotor.TargetRotation">
            <summary>
            See ServoBase.targetRotation.
            </summary>
        </member>
        <member name="P:PiEAPI.ServoMotor.AngularSpeed">
            <summary>
            See ServoBase.angularSpeed.
            </summary>
        </member>
        <member name="P:PiEAPI.ServoMotor.Channel">
            <summary>
            See ServoBase.channel.
            </summary>
        </member>
        <member name="T:PiEAPI.Sherlock">
            <summary>
            Class for references to pins attached to Sherlock
            </summary>
        </member>
        <member name="F:PiEAPI.Sherlock.PacketLED">
            <summary>
            The yellow LED
            </summary>
        </member>
        <member name="F:PiEAPI.Sherlock.ErrorLED">
            <summary>
            The red LED
            </summary>
        </member>
        <member name="F:PiEAPI.Sherlock.BatteryPresence">
            <summary>
            Battery presence indicator-- low if battery present(good),
            high if not(bad).
            </summary>
        </member>
        <member name="M:PiEAPI.Sherlock.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:PiEAPI.Sherlock"/> class from being created.
            </summary>
        </member>
        <member name="T:PiEAPI.Solenoid">
            <summary>
            As an extension of the Actuator class, this abstraction class for the Solenoid 
            will activate and deactivate the solenoid upon command from students' software.
            It does so by using a Digital Output pin on the FEZ Panda II.
            </summary>
        </member>
        <member name="F:PiEAPI.Solenoid.enable">
            <summary>
            This port is the enable pin on the Solenoid pin. It must be driven 
            low for the Solenoids to activate.
            </summary>
        </member>
        <member name="F:PiEAPI.Solenoid.port">
            <summary>
            A GHI API's OutputPort to read and write a digital high or low to control the solenoid.
            </summary>
        </member>
        <member name="F:PiEAPI.Solenoid.isHigh">
            <summary>
            A variable that keeps the voltage level of the solenoid.
            </summary>
        </member>
        <member name="M:PiEAPI.Solenoid.#ctor(PiEAPI.Robot,PiE.HAL.Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Initializes a new instance of the Solenoid class and assigns the value of "true" in code to correspond to "high"
            as a voltage reading.  Like all actuators, it accepts a robot as itself.
            If the inputted pin is not one of the predetermined constants, Solenoid informs the user of his or her mistake.
            </summary>
            <param name="robot">The robot the pin is attached to.</param>
            <param name="pin">This parameter must be one of the predetermined constants.</param>
        </member>
        <member name="M:PiEAPI.Solenoid.Write">
            <summary>
            Solenoid follows the Actuator interface for the method Write (when enabled to).
            </summary>
        </member>
        <member name="M:PiEAPI.Solenoid.Kill">
            <summary>
            Solenoid follows the Actuator interface for the method Kill.
            </summary>
        </member>
        <member name="M:PiEAPI.Solenoid.Revive">
            <summary>
            Solenoid follows the Actuator interface for the method Revive.
            </summary>
        </member>
        <member name="P:PiEAPI.Solenoid.Activated">
            <summary>
            Gets or sets a value indicating whether students' code has requested the 
            value to be True or False.
            </summary>
        </member>
        <member name="T:PiEAPI.Stopwatch">
            <summary>
            Represents a Stopwatch that keeps track of elapsed time.
            </summary>
        </member>
        <member name="F:PiEAPI.Stopwatch.startTime">
            <summary>
            The time at which Start() was last called.
            </summary>
        </member>
        <member name="F:PiEAPI.Stopwatch.elapsedTime">
            <summary>
            The amount of time elapsed.
            </summary>
        </member>
        <member name="M:PiEAPI.Stopwatch.#ctor">
            <summary>
            Instantiate a new Stopwatch object.
            Does not start keeping time.
            </summary>
        </member>
        <member name="M:PiEAPI.Stopwatch.Start">
            <summary>
            Start keeping time.
            </summary>
        </member>
        <member name="M:PiEAPI.Stopwatch.Stop">
            <summary>
            Stop keeping time.
            </summary>
        </member>
        <member name="M:PiEAPI.Stopwatch.Reset">
            <summary>
            Stops keeping the time and resets elspsed time to zero.
            </summary>
        </member>
        <member name="M:PiEAPI.Stopwatch.Restart">
            <summary>
            Stop keeping the time, reset elapsed time to zero,
            and resume timekeeping.
            </summary>
        </member>
        <member name="P:PiEAPI.Stopwatch.IsRunning">
            <summary>
            Whether or not time is being kept.
            </summary>
        </member>
        <member name="P:PiEAPI.Stopwatch.ElapsedTime">
            <summary>
            Gets the amount of time elapsed in seconds.
            </summary>
        </member>
        <member name="T:PiEAPI.Watson">
            <summary>
            Class containing references to pins attached to Watson
            </summary>
        </member>
        <member name="M:PiEAPI.Watson.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:PiEAPI.Sherlock"/> class from being created.
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.Analog">
            <summary>
            Class for Analog pin references
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a0">
            <summary>
            reference to A0
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a1">
            <summary>
            reference to A1
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a2">
            <summary>
            reference to A2
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a3">
            <summary>
            reference to A3
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a4">
            <summary>
            reference to A4
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Analog.a5">
            <summary>
            reference to A5
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A0">
            <summary>
            Analog port 0
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A1">
            <summary>
            Analog port 1
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A2">
            <summary>
            Analog port 2
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A3">
            <summary>
            Analog port 3
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A4">
            <summary>
            Analog port 4
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Analog.A5">
            <summary>
            Analog port 5
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.Digital">
            <summary>
            Class for Digital pin references
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d0">
            <summary>
            reference to D0
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d1">
            <summary>
            reference to D1
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d2">
            <summary>
            reference to D2
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d3">
            <summary>
            reference to D3
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d4">
            <summary>
            reference to D4
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d5">
            <summary>
            reference to D5
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d6">
            <summary>
            reference to D6
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Digital.d7">
            <summary>
            reference to D7
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D0">
            <summary>
            Digital port 0
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D1">
            <summary>
            Digital port 1
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D2">
            <summary>
            Digital port 2
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D3">
            <summary>
            Digital port 3
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D4">
            <summary>
            Digital port 4
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D5">
            <summary>
            Digital port 5
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D6">
            <summary>
            Digital port 6
            </summary>
        </member>
        <member name="P:PiEAPI.Watson.Digital.D7">
            <summary>
            Digital port 7
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.Motor">
            <summary>
            Class for addresses of motor I2C devices
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M0">
            <summary>
            Motor 0 I2C address
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M1">
            <summary>
            Motor 1 I2C address
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M2">
            <summary>
            Motor 2 I2C address
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M3">
            <summary>
            Motor 3 I2C address
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M4">
            <summary>
            Motor 4 I2C address
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M5">
            <summary>
            Motor 5 I2Caddress
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.Motor.M6">
            <summary>
            Motor 5 I2C address
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.SolenoidPins">
            <summary>
            Class for solenoid pin references.
            S0 is the leftmost pin, and numbers increase to the right.
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.SolenoidPins.S1">
            <summary>
            Solenoid pin on left
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.SolenoidPins.S2">
            <summary>
            Solenoid pin 2nd from left
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.SolenoidPins.S3">
            <summary>
            Solenoid pin 3rd from left
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.SolenoidPins.S4">
            <summary>
            Solenoid pin 4th from left
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.SolenoidPins.Enable">
            <summary>
            Solenoid Enable pin
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.I2C">
            <summary>
            Class for addresses of non-motor I2C devices
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.I2C.MPU">
            <summary>
            MPU6050 I2C address
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.RfidPins">
            <summary>
            Class for Rfid pin references
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.RfidPins.ChipSelect">
            <summary>
            Rfid ChipSelect pin
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.RfidPins.Irq">
            <summary>
            Rfid IRQ pin
            </summary>
        </member>
        <member name="T:PiEAPI.Watson.TeamFlag">
            <summary>
            Class for team flag LED references
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.TeamFlag.Blue">
            <summary>
            Blue team flag
            </summary>
        </member>
        <member name="F:PiEAPI.Watson.TeamFlag.Yellow">
            <summary>
            Yellow team flag
            </summary>
        </member>
        <member name="T:PiEAPI.Radio">
            <summary>
            This class controls the XBee that communicates with PiEMOS.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.MaxPageRequests">
            <summary>
            The maximum number of PageData requests to issue per packet.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.RadioRXLock">
            <summary>
            Lock to prevent our data being read while we are updating it.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.RadioTXLock">
            <summary>
            Lock to prevent our data being modified while we are writing it.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.robot">
            <summary>
            The Robot that created this Radio instance.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.fieldTime">
            <summary>
            The field time from the incoming data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.canMove">
            <summary>
            Whether or not the robot can move, from the incoming data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.isAutonomous">
            <summary>
            Whether or not the robot is autonomous, from the incoming data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.isBlue">
            <summary>
            Whether or not the robot is on the Blue Team, from incoming data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.lastUpdate">
            <summary>
            The last time we updated our values with incoming data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.readTimeout">
            <summary>
            Read timeout to be used for SerialPort.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.interfaceAddress">
            <summary>
            The address of the sender.
            (the PiEMOS instance we are communicating with)
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.port">
            <summary>
            The serial port to listen and send data on.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.receiver">
            <summary>
            Parses the packet received by the XBee and pulls the data out.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.frame">
            <summary>
            The frame to send with the outgoing data.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.requestMissingPagesTimer">
            <summary>
            The timer to periodically send out page requests for missing pages
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.pageReceived">
            <summary>
            An array containing an element for each page, set to true if the
            page was received
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.changedRadioData">
            <summary>
            Whether or not the outgoing radio data values have changed
            since the last time we sent them.
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.outData">
            <summary>
            The data to send from the robot to PiEMOS (telemetry data.)
            </summary>
        </member>
        <member name="F:PiEAPI.Radio.messageQueue">
            <summary>
            The queue of messages.
            </summary>
        </member>
        <member name="M:PiEAPI.Radio.#ctor(PiEAPI.Robot,PiE.HAL.System.IO.Ports.SerialPort)">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.Radio"/> class.
            </summary>
            <param name="robot">
            The robot object that created this Radio, that contains the
            hashtable that keeps track of data pages.
            </param>
            <param name="port">
            The pre-initialized SerialPort object passed into the Radio class.
            </param>
        </member>
        <member name="M:PiEAPI.Radio.XBeeChecksum(System.Byte[])">
            <summary>
            Calculates the checksum for a packet.
            </summary>
            <param name="packet">
            The packet to calculate the checksum for.
            </param>
            <returns>A byte representing the packet's checksum.</returns>
        </member>
        <member name="M:PiEAPI.Radio.EnqueueMessage(System.String)">
            <summary>
            Adds a message to the queue. 80 characters or less.
            </summary>
            <param name="str">The message.</param>
        </member>
        <member name="M:PiEAPI.Radio.SendOutgoingData(PiEAPI.Robot)">
            <summary>
            Send the data in our outgoing data array back to PiEMOS.
            </summary>
            <param name="robot">
            The Robot instance containing data to send.
            </param>
        </member>
        <member name="M:PiEAPI.Radio.SendConsoleData">
            <summary>
            Send the interfaceprint debugdata to PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.Radio.DataReceivedHandler(System.Object,PiE.HAL.System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            This event handler method is used to handle data received from
            the radio.
            </summary>
            <param name="sender">Object used to raise the event</param>
            <param name="e">Data for the raised event</param>
        </member>
        <member name="M:PiEAPI.Radio.RequestMissingPages(System.Object)">
            <summary>
            Requests pages that the robot hasn't received yet.
            </summary>
            <param name='stateInfo'>
            State info. (unused)
            </param>
        </member>
        <member name="P:PiEAPI.Radio.InterfaceAddress">
            <summary>
            Gets or sets the interfaceAddress attribute.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.FieldTime">
            <summary>
            Gets or sets the fieldTime attribute.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.CanMove">
            <summary>
            Gets or sets a value indicating whether
            the robot can move.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.IsAutonomous">
            <summary>
            Gets or sets a value indicating whether
            the robot is in autonomous mode.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.IsBlue">
            <summary>
            Gets or sets a value indicating whether
            the robot is on the blue team.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.LastUpdate">
            <summary>
            Gets or sets the lastUpdate attribute.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.Receiver">
            <summary>
            Gets or sets the receiver attribute.
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.PiEMOSAnalogVals">
            <summary>
            Gets the Analog values from the incoming data
            (range: [-100, 100]).
            </summary>
        </member>
        <member name="P:PiEAPI.Radio.PiEMOSDigitalVals">
            <summary>
            Gets the Digital values from the incoming data.
            </summary>
        </member>
        <member name="T:PiEAPI.Rfid">
            <summary>
            Class for an RFID Sensor. Designed for the NXP PN532.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.SpiClockRate">
            <summary>
            Clock rate, in KHz.
            Maximum SPI CLK rate is 5 MHz, or 5000 KHz.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.ResponseTimeout">
            <summary>
            ResponseTimeout for Board to report that it has a response ready.
            Measured in seconds.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.rfidLock">
            <summary>
            Make update not happen if update is in progress.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.debugMode">
            <summary>
            Whether Debug Mode is on.
            If on, run GetBoardFirmware and GetBoardStatus in the constructor,
            after Board setup.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.infiniteMode">
            <summary>
            Whether Infinite Mode is on.
            If on, the ScanForTags command will cause the Board to keep on
            looking for tags until it finds one. I.e. it will never time out.
            Used for debugging.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.robot">
            <summary>
            The robot instance this sensor belongs to
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.pn532">
            <summary>
            SPI object that will communicate with the RFID Board.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.irqIn">
            <summary>
            Panda's port to which the reader's IRQ_OUT is connected,
            which will be Low when the reader has readies a response.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.waitingForInterrupt">
            <summary>
            Whether the reader object is currently waiting for
            the Board to indicate over IRQ that it has readied a
            message to send to the Panda.
            This is not used while polling the Board
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.commFailureEncountered">
            <summary>
            Whether a communication failure has been encountered.
            If true, cease all future communication.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.stopwatch">
            <summary>
            Used to detect timeouts in communication.
            It one is detected, it is treated as a communication failure.
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.llState">
            <summary>
            Interface-level state machine state
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.hlState">
            <summary>
            Protocol-level state machine state
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.#ctor(PiEAPI.Robot)">
            <summary>
            Constructor for RFID object.
            Creates SPI object and InputPort object.
            Starts up the reader.
            </summary>
            <param name="robot">Robot object to which this belongs</param>
        </member>
        <member name="M:PiEAPI.Rfid.AddToGlobalList">
            <summary>
            Add this sensor to the list of sensors in base.robot.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.GetValues">
            <summary>
            Return this.CurrentItemScanned and this.LastItemScanned in an array.
            </summary>
            <returns>Array of CurrentItemScanned and LastItemScanned.</returns>
        </member>
        <member name="M:PiEAPI.Rfid.Update">
            <summary>
            Update this.CurrentItemScanned to a FieldItem object indicating the
            type of the tag found last tag search.
            If no tag was found, instead set this.CurrentItemScanned to null.
            However if table lookup fails, dynamically create a new 
            FieldItem object with the correct uid, but with an invalid tag type.
            If a tag is found, set this.LastItemScanned to it.
            If one is not found, leave this.LastItemScanned alone.
            If a comm failure have been encountered, re-report and don't update.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.StartUp">
            <summary>
            Perform the necessary startup sequence,
            including appropriate time delays.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.StartUpWait">
            <summary>
            Wake Board up from LowVBat mode by setting ChipSelect
            to LOW (active) for 1ms.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.StartUpSamConfig">
            <summary>
            Configure the Security Access Module (to not be used),
            and tell the Board to use the IRQ for when its responses are ready.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.StartUpRfConfig">
            <summary>
            Configure the Board to not wait eternally for a tag to be detected
            upon reception of a ScanForTags command. We want it to time out if
            no tag if found in time.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.ScanForTags">
            <summary>
            Scan for a tag and read its uid.
            Return RfidUid object of tag uid.
            If no tag found, return null.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.ForgetTags">
            <summary>
            Instruct the Board to forget about all the tags it has activated.
            This will cause all tags still in range to be re-activated upon
            the next call of ScanForTags. Otherwise if a tag is still in range
            and has been activated the during the last ScanForTags, it will not
            re-activate it will be unknown whether the robot is still in range
            of the previously activated tag.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.GetBoardFirmware">
            <summary>
            Ask the Board for the version of its embedded firmware.
            This is used for debugging.
            </summary>
            <returns>firmware data</returns>
        </member>
        <member name="M:PiEAPI.Rfid.GetBoardStatus">
            <summary>
            Ask the Board for its general status, including the last error
            encountered, if an external RF field is detected, how many
            targets it currently controls, the details of any targets,
            and the status of the SAM (security access module, unused for us).
            This is used for debugging.
            </summary>
            <returns>status data</returns>
        </member>
        <member name="M:PiEAPI.Rfid.Communicate(System.Byte[],System.Byte[])">
            <summary>
            Send a command to reader, confirm Ack, and receive Response.
            Wait for Board to have each response ready,
            by checking the this.irqIn pin.
            This is the one that should be used for general Communication.
            During StartUp, this.irqIn doesn't work,
            so use CommunicatePoll instead.
            Return True on success.
            Users of this must implement their own error-checking.
            Do nothing if comm failures have bee encountered.
            Stop immediately if they occur.
            </summary>
            <param name="cmd">Command data</param>
            <param name="rx_data">Destination of Response data</param>
            <returns>True on success</returns>
        </member>
        <member name="M:PiEAPI.Rfid.CommunicatePoll(System.Byte[],System.Byte[])">
            <summary>
            Send a command to reader, confirm Ack, and receive Response.
            Wait for Board to have each response ready,
            by polling the board.
            This is required for StartUp,
            as the this.irqIn will not be triggered during that time.
            Return True on success.
            Users of this must implement their own error-checking.
            </summary>
            <param name="cmd">Command data</param>
            <param name="rx_data">Destination of Response data</param>
            <returns>True on success</returns>
        </member>
        <member name="M:PiEAPI.Rfid.WriteCommand(System.Byte[])">
            <summary>
            Write a command packet, formatting properly
            </summary>
            <param name="cmd">Command data to write</param>
        </member>
        <member name="M:PiEAPI.Rfid.GetAck">
            <summary>
            Read the ready Ack frame.
            Do not confirm expected ack frame,
            because it is sometimes of a different form event though it works.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.GetResponse(System.Byte[])">
            <summary>
            Read the ready response packet.
            </summary>
            <param name="resp_data">Destination of response data</param>
        </member>
        <member name="M:PiEAPI.Rfid.SendAck">
            <summary>
            Send an Ack frame to Board,
            indicating successful data transfer.
            It is optional for the Panda to do so.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.WaitForReadyIrq">
            <summary>
            Wait until Board has a response prepared.
            Find this out by repeatedly testing this.waitingForInterrupt, 
            which will be tripped false on an interrupt.
            </summary>
            <returns>Whether Board became ready within ResponseTimeout</returns>
        </member>
        <member name="M:PiEAPI.Rfid.CatchInterrupt(System.UInt32,System.UInt32,System.DateTime)">
            <summary>
            Receives indications over the IRQ pin that
            the Board has readied its response.
            Alerts rest of reader object that the Board is ready.
            </summary>
            <param name="port">the GPIO pin</param>
            <param name="state">the pin's state</param>
            <param name="time">when the interrupt was received</param>
        </member>
        <member name="M:PiEAPI.Rfid.HandleForgetTagsResult">
            <summary>
            Handle result of forgetting tags
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.HandleTagScanResult">
            <summary>
            Handle result of scanning for tags
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.WaitForReadyPoll">
            <summary>
            Wait until Board has a response prepared.
            Find this out by repeatedly polling it.
            </summary>
            <returns>Whether Board became ready within ResponseTimeout</returns>
        </member>
        <member name="M:PiEAPI.Rfid.ReadyPoll">
            <summary>
            Returns whether Board has a response prepared.
            Find this out by polling it.
            </summary>
            <returns>Readiness of Board's response packet</returns>
        </member>
        <member name="M:PiEAPI.Rfid.HandleCommFailure">
            <summary>
            Perform necessary actions for handling a communication failure.
            Set this.commFailureEncountered to true.
            Report this encounter to the Debug console and to PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.ReportCommFailure">
            <summary>
            Report to the Debug console and to PiEMOS that
            a communication failure has been encountered.
            </summary>
        </member>
        <member name="M:PiEAPI.Rfid.VerifyResponse(System.Byte[],System.Byte[])">
            <summary>
            Verify response from Board is what is expected.
            While response is incorrect, send Nack and re-request response.
            </summary>
            <param name="received">
            Received, and destination of, response data.
            </param>
            <param name="expected">Expected Response data</param>
        </member>
        <member name="M:PiEAPI.Rfid.Write(System.Byte[])">
            <summary>
            Write a pre-formatted command packet to the Board,
            Flipping bit order before doing so,
            MSB-first to LSB-first.
            </summary>
            <param name="cmd">Pre-formatted command packet</param>
        </member>
        <member name="M:PiEAPI.Rfid.WriteRead(System.Byte[],System.Byte[])">
            <summary>
            Write a pre-formatted command and receive a response,
            after flipping command from MSB-first to LSB-first.
            Then flip response from LSB-first to MSB-first.
            </summary>
            <param name="cmd">Pre-formatted command packet</param>
            <param name="rx_data">Full received Board response packet</param>
        </member>
        <member name="M:PiEAPI.Rfid.ReverseByteArray(System.Byte[])">
            <summary>
            Reverse an array of bytes, in place.
            Reverses each byte individually.
            </summary>
            <param name="octets">Byte array to reverse, in place</param>
        </member>
        <member name="M:PiEAPI.Rfid.ReverseByte(System.Byte)">
            <summary>
            Reverse a byte:
            Flip bit order from MSB-first to LSB-first, or vice-versa.
            </summary>
            <param name="octet">Byte to reverse</param>
            <returns>Reversed byte</returns>
        </member>
        <member name="M:PiEAPI.Rfid.ByteArrayToHexString(System.Byte[])">
            <summary>
            Convert a byte array to a string
            of the hex representation (without leading 0x).
            </summary>
            <param name="byteArray">Byte array to convert</param>
            <returns>String of hex of byte array</returns>
        </member>
        <member name="P:PiEAPI.Rfid.LastItemScanned">
            <summary>
            Get the last successfully scanned FieldItem.
            Until a tag has been read, this is null.
            After that, this will never be null.
            </summary>
        </member>
        <member name="P:PiEAPI.Rfid.CurrentItemScanned">
            <summary>
            Get the FieldItem found on the last scan.
            If nothing was found on last scan, this is null.
            </summary>
        </member>
        <member name="T:PiEAPI.Rfid.RfidInterfaceState">
            <summary>
            Enum for low-level state machine
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.RfidInterfaceState.WaitForAck">
            <summary>
            The next thing we are expecting is an ACK for our command
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.RfidInterfaceState.WaitForResp">
            <summary>
            The next thing we are expecting is a reply to a command
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.RfidInterfaceState.IrqPollingState">
            <summary>
            Use the old IRQ polling code (initialization only)
            </summary>
        </member>
        <member name="T:PiEAPI.Rfid.RfidProtocolState">
            <summary>
            Enum for high-level state machine
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.RfidProtocolState.ScanTagsState">
            <summary>
            Doing a tag scan
            </summary>
        </member>
        <member name="F:PiEAPI.Rfid.RfidProtocolState.ForgetTagsState">
            <summary>
            Doing the "forget tags" command
            </summary>
        </member>
        <member name="T:PiEAPI.Robot">
            <summary>
            This class represents the physical robot.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.HeartbeatPeriod">
            <summary>
            Defines the duration of a "heartbeat" in ticks (20 seconds). There
            are 10000 ticks in a millisecond.
            If the radio is not responding (communicating at least once per
            heartbeat duration), we kill the actuators.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.NumFieldTags">
            <summary>
            Number of tags on the field for each game.
            This is used to initialize the rfidTags hashtable
            to the necessary size so as to avoid expensive rehashing.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.PierVersionReplaceMe">
            <summary>
            Current version of PiER.
            Should be first 4 bytes of latest commit hash.
            Automacigally replaced with correct value at compile time
            by a script.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.CleanOnBuildReplaceMe">
            <summary>
            Whether the working directory was clean on the last build of PiER.
            Automacigally replaced with correct value at compile time
            by a script.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.heartbeatTimer">
            <summary>
            Stores the last time tick that was created by the radio.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.rfidTags">
            <summary>
            Hashtable mapping tag uid to tag type.
            Keys are RfidUid objects with tag uid,
            Values are FieldItem objects with tag group id and tag type.
            To access it, use robot's methods, since they cast properly.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.feedbackAnalogVals">
            <summary>
            Int array that contains the analog values to send to PiEMOS.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.feedbackDigitalVals">
            <summary>
            Bool array that contains the digital values to send to PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.Robot"/> class.
            </summary>
            <param name="teamID">Team ID</param>
            <param name="radioComPort">Radio Port. This String should be in
            the format "COM[0-4]". For example, "COM1".</param>
        </member>
        <member name="M:PiEAPI.Robot.KillActuators">
            <summary>
            Kills actuators; can be called by StudentCode or Robot thread.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.ReviveActuators">
            <summary>
            Revives actuators; can be called by StudentCode or Robot thread
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.SendConsoleMessage(System.String)">
            <summary>
            Sends a string to the PiEMOS console. 80 characters or less.
            </summary>
            <param name="str"> The message to be sent. </param>
        </member>
        <member name="M:PiEAPI.Robot.SetAutonomous(System.Boolean)">
            <summary>
            Switch on or off autonomous mode.
            </summary>
            <param name="autonomousState">True if we are setting
            robot to autonomous mode. False if we are setting to
            user-controlled mode. </param>
        </member>
        <member name="M:PiEAPI.Robot.Run">
            <summary>
            Robot Thread constantly calls this to update robot with
            new data from radio and revive actuators.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.UpdatePiEMOSVals">
            <summary>
            Read inputs from PiEMOS and update their internal representation.
            Also updates the field time.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.UpdateTeamColorLEDs">
            <summary>
            Update the status of the team color LEDs on the top board.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.WriteActuators">
            <summary>
            Update the actuators/kill them.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.UpdateSensors">
            <summary>
            Update sensors with new values.
            </summary>
        </member>
        <member name="M:PiEAPI.Robot.AddItemToTable(PiEAPI.RfidUid,PiEAPI.FieldItem)">
            <summary>
            Add a key-value pair to the HashTable mapping
            RfidUid objects containing tag uid to
            FieldItem objects containing tag uid, tag type, and tag group id.
            </summary>
            <param name="key">RfidUid containing tag uid.</param>
            <param name="value">FieldItem containing tag uid, tag type,
            and tag group id.</param>
        </member>
        <member name="M:PiEAPI.Robot.GetItemFromTable(PiEAPI.RfidUid)">
            <summary>
            Get the FieldItem object value associated with a RfidUid object key,
            or null if no value is found.
            </summary>
            <param name="key">RfidUid object key.</param>
            <returns>FieldItem object associated with passed key,
            or null if no associated FieldItem was found.</returns>
        </member>
        <member name="P:PiEAPI.Robot.I2C">
            <summary>
            Gets the robot's I2C device, which is shared by all
            I2C components on the robot.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.FieldTime">
            <summary>
            Gets current match time in seconds.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.TeamID">
            <summary>
            Gets String representing team's unique ID.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.CanMove">
            <summary>
            Gets a value indicating whether the robot can move
            (whether your actuators are dead).
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.IsAutonomous">
            <summary>
            Gets a value indicating whether the robot is in
            autonomous mode.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.MyColor">
            <summary>
            Gets the team color.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.PiEMOSAnalogVals">
            <summary>
            Gets the analog values received by our XBeeInterface
            radio data receiver (range: [-100, 100]).
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.PiEMOSDigitalVals">
            <summary>
            Gets the digital values received by our XBeeInterface
            radio data receiver.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.FeedbackAnalogVals">
            <summary>
            Gets the array containing analog values to send via the radio
            (range: [-100, 100]).
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.FeedbackDigitalVals">
            <summary>
            Gets the array containing digital values to send via the radio.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.YellowLED">
            <summary>
            Gets or sets port representation of the yellow LED pin.
            Blinks when robot receives data.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.RedLED">
            <summary>
            Gets or sets port representation of the red LED pin.
            Lights up when robot is on.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.BlueTeamLED">
            <summary>
            Gets or sets LED for blue team. The pin number for
            this LED is 6.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.YellowTeamLED">
            <summary>
            Gets or sets LED for yellow team. The pin number for
            this LED is 7.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.Actuators">
            <summary>
            Gets list of actuator controllers on this robot.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.Sensors">
            <summary>
            Gets list of sensors on this robot.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.Ports">
            <summary>
            Gets list of open communication ports on this robot.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.BatteryBuzzer">
            <summary>
            Gets the battery buzzer.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.Radio">
            <summary>
            Gets this robot's Radio object.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.PierVersion">
            <summary>
            Gets the current version of PiER.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.CleanOnBuild">
            <summary>
            Gets whether the working directory was clean on last build.
            </summary>
        </member>
        <member name="P:PiEAPI.Robot.BuildTime">
            <summary>
            Gets the Unix time of the last build.
            </summary>
        </member>
        <member name="T:PiEAPI.Robot.TeamColor">
            <summary>
            Enumeration of all possible team colors.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.TeamColor.Blue">
            <summary>
            Represents the blue team.
            </summary>
        </member>
        <member name="F:PiEAPI.Robot.TeamColor.Yellow">
            <summary>
            Represents the yellow team.
            </summary>
        </member>
        <member name="T:PiEAPI.RobotCode">
            <summary>
            The Student Code must implement this interface and is required to have these methods.
            This allows us to run the Threads in Robot but move the Main method to StudentCode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.TeleoperatedCode">
            <summary>
            Teleoperated code.  Defined further in StudentCode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.AutonomousCode">
            <summary>
            Autonomous code.  Defined further in StudentCode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.DisabledTeleoperatedCode">
            <summary>
            Teleoperated code while disabled. Defined further in StudentCode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.DisabledAutonomousCode">
            <summary>
            Autonomous code while disabled. Defined further in StudentCode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.WatchdogReset">
            <summary>
            This is called whenever the supervisor disabled studentcode.
            </summary>
        </member>
        <member name="M:PiEAPI.RobotCode.GetRobot">
            <summary>
            The Robot to use.  Defined further in StudentCode.
            </summary>
            <returns>Robot associated with this StudentCode.</returns>
        </member>
        <member name="T:PiEAPI.XBeeAPIFrameTypes">
            <summary>
            Possible API frame IDs
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.TX64">
            <summary>
            Send a packet to a 64-bit destination address
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.TX16">
            <summary>
            Send a packet to a 16-bit destination address
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.ATCOMMAND">
            <summary>
            Perform an AT command
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.ATCOMMANDQUEUEVALUE">
            <summary>
            Send a parameter for an AT command
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.REMOTEATCOMMANDREQ">
            <summary>
            Request a remote module to perform an AT command
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.RX64">
            <summary>
            Received a packet from a 64-bit source address
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.RX16">
            <summary>
            Received a packet from a 16-bit source address
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.ATCOMMANDREPLY">
            <summary>
            Response from an AT command
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.TXSTATUS">
            <summary>
            Status of a previous transmission
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.MODEMSTATUS">
            <summary>
            XBee status changed
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeAPIFrameTypes.REMOTEATCOMMANDREPLY">
            <summary>
            Response from remote AT command
            </summary>
        </member>
        <member name="T:PiEAPI.INCOMING_DATA">
            <summary>
            Incoming packet properties (for receiving data).
            (Must be reflected in PiEMOS configuration).
            </summary>
        </member>
        <member name="F:PiEAPI.INCOMING_DATA.IDENT">
            <summary>
            Identification byte.
            </summary>
        </member>
        <member name="F:PiEAPI.INCOMING_DATA.ANALOG_BYTES">
            <summary>
            Number of analog bytes.
            </summary>
        </member>
        <member name="F:PiEAPI.INCOMING_DATA.DIGITAL_BYTES">
            <summary>
            Number of digital bytes.
            </summary>
        </member>
        <member name="T:PiEAPI.OUTGOING_DATA">
            <summary>
            Outgoing packet properties (for sending data).
            (Must be reflected in PiEMOS configuration).
            </summary>
        </member>
        <member name="F:PiEAPI.OUTGOING_DATA.IDENT">
            <summary>
            Identification byte.
            </summary>
        </member>
        <member name="F:PiEAPI.OUTGOING_DATA.ANALOG_BYTES">
            <summary>
            Number of analog bytes.
            </summary>
        </member>
        <member name="F:PiEAPI.OUTGOING_DATA.DIGITAL_BYTES">
            <summary>
            Number of digital bytes.
            </summary>
        </member>
        <member name="T:PiEAPI.CONSOLE_DATA">
            <summary>
            Outgoing packet properties (for sending console messages).
            (Must be reflected in PiEMOS configuration.
            </summary>
        </member>
        <member name="F:PiEAPI.CONSOLE_DATA.IDENT">
            <summary>
            Identification byte.
            </summary>
        </member>
        <member name="T:PiEAPI.PAGE_DATA">
            <summary>
            Page data packet properties
            </summary>
        </member>
        <member name="F:PiEAPI.PAGE_DATA.IDENT">
            <summary>
            Identification byte.
            </summary>
        </member>
        <member name="T:PiEAPI.XBeeInterfaceReceiver">
            <summary>
            Class to parse the incoming XBee packet and put it
            into a data array we can deal with.
            </summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.state">
            <summary>Current state of the receiver.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.bytesRead">
            <summary>Number of bytes read.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.packet">
            <summary>The XBee packet to parse.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.fullPacket">
            <summary>Whether or not we received a full packet.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.parent">
            <summary>The radio instance we're parsing packets for.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.checksumAccum">
            <summary>
            Accumulated checksum value. Updated for each byte received.
            </summary>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.#ctor(PiEAPI.Radio)">
            <summary>
            Initializes a new instance of the
            <see cref="T:PiEAPI.XBeeInterfaceReceiver"/> class.
            </summary>
            <param name="parent">
            The parent Radio instance we're parsing packets for.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.Fill(System.Byte[])">
            <summary>Parse a packet received by the XBee.</summary>
            <param name="bytes">
            The bytes of the incoming packet.
            </param>
            <returns>
            True if we actually received a full packet, False otherwise.
            </returns>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillIdle(System.Byte)">
            <summary>
            Handles the RXState.IDLE case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillLen(System.Byte)">
            <summary>
            Handles the RXState.LEN case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillCommand(System.Byte)">
            <summary>
            Handles the RXState.COMMAND case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillSrc64(System.Byte)">
            <summary>
            Handles the RXState.SRC64 case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillRssi(System.Byte)">
            <summary>
            Handles the RXState.RSSI case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillOptions(System.Byte)">
            <summary>
            Handles the RXState.OPTIONS case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillData(System.Byte)">
            <summary>
            Handles the RXState.DATA case in the Fill method.
            </summary>
            <param name="b">A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillChecksum(System.Byte)">
            <summary>
            Handles the RXState.CHECKSUM case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="M:PiEAPI.XBeeInterfaceReceiver.FillUnknown(System.Byte)">
            <summary>
            Handles the RXState.UNKNOWN case in the Fill method.
            </summary>
            <param name="b">
            A byte from the incoming packet's byte array.
            </param>
        </member>
        <member name="P:PiEAPI.XBeeInterfaceReceiver.Packet">
            <summary>Gets or sets the XBee packet to parse.</summary>
        </member>
        <member name="T:PiEAPI.XBeeInterfaceReceiver.RXState">
            <summary>Possible states of the receiver.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.IDLE">
            <summary>The idle state.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.LEN">
            <summary>Receiving length (of packet payload).</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.COMMAND">
            <summary>Receiving a command.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.SRC64">
            <summary>Receiving the 64-bit source address.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.RSSI">
            <summary>Receiving signal strength indicator.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.OPTIONS">
            <summary>Receiving options.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.DATA">
            <summary>Receiving data.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.CHECKSUM">
            <summary>Receiving checksum (and data validation).</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.UNKNOWN">
            <summary>Unknown state.</summary>
        </member>
        <member name="F:PiEAPI.XBeeInterfaceReceiver.RXState.ERROR">
            <summary>An error has occurred.</summary>
        </member>
        <member name="T:PiEAPI.XBeeRxPacket">
            <summary>
            Class to represent an incoming XBee packet.
            Only handles 64-bit addresses (the only type used).
            </summary>
        </member>
        <member name="M:PiEAPI.XBeeRxPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.XBeeRxPacket"/> class.
            </summary>
        </member>
        <member name="M:PiEAPI.XBeeRxPacket.#ctor(System.UInt32,System.Byte,System.UInt64,System.Byte,System.Byte,System.Byte[],System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.XBeeRxPacket"/> class.
            </summary>
            <param name="packetLength">Received length of the packet.</param>
            <param name="packetCommand">Received command of the packet.</param>
            <param name="packetSrc64">Received 64-bit sender's address.</param>
            <param name="packetRssi">Received $$rssi$$ field.</param>
            <param name="packetOptions">Received options.</param>
            <param name="packetData">
            Received data that we actually care about.
            </param>
            <param name="packetChecksum">
            Received checksum to check for corruption.
            </param>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Data">
            <summary>Gets or sets the data in the packet.</summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Length">
            <summary>Gets or sets the length of the packet.</summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Command">
            <summary>Gets or sets the command from the packet.</summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Src64">
            <summary>
            Gets or sets the 64-bit sender's address field in the packet.
            </summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Rssi">
            <summary>
            Gets or sets the received single strength indicator
            field in the packet.
            </summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Options">
            <summary>Gets or sets the options field in the packet.</summary>
        </member>
        <member name="P:PiEAPI.XBeeRxPacket.Checksum">
            <summary>Gets or sets the checksum field in the packet.</summary>
        </member>
        <member name="T:PiEAPI.AnalogAccelerometer">
            <summary>
            This class represents 3 axis accelerometers that are installed on the
            robot. It follows the same interface as all the other Sensors.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.xIn">
            <summary>
            The input pin number for the accelerometer's x axis
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.yIn">
            <summary>
            The input pin number for the accelerometer's y axis
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.zIn">
            <summary>
            The input pin number for the accelerometer's z axis
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.xZero">
            <summary>
            Stores the calibration values for each of the accelerometer axes.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.yZero">
            <summary>
            Stores the calibration values for each of the accelerometer axes.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogAccelerometer.zZero">
            <summary>
            Stores the calibration values for each of the accelerometer axes.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>
            Initializes a new instance of the AnalogAccelerometer class.
            Represents one 3axis accelerometer on the robot and
            holds the last read values in the x,y,z directions. This will
            initialize the pin number to an Analog object and set the range
            of values possible for this input. Then it will zero the sensor
            at initialization, save the current values(should be all 0), and
            add itself to a global list of other sensors.  If xPin number
            matches the constant that signifies a nonexistent pin (noPin),
            do not retrieve the analog port.
            </summary>
            <param name="robo">The robot the pins are attached to.</param>
            <param name="xPin">The pin corresponding to where the x-axis
            acceleration is read from</param>
            <param name="yPin">The pin corresponding to where the y-axis
            acceleration is read from</param>
            <param name="zPin">The pin corresponding to where the z-axis
            acceleration is read from</param>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.Update">
            <summary>
            The primary interface method. This is called when new readings are
            needed by the Read thread.  It will read all inputs, then store
            them in the Values array to be interpreted by the caller.
            </summary>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.GetValues">
            <summary>
            Another primary interface method. This allows the acceleration
            values stored in Values array to be viewed by outside methods.
            </summary>
            <returns>Returns a copy of the current Values array</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.RawX">
            <summary>
            Reads the raw, un-zeroed output value of the x axis and returns
            0 if no X axis behavior.
            </summary>
            <returns>Returns the value read from AnalogIn</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.RawY">
            <summary>
            Reads the raw, un-zeroed output value of the y axis and returns
            0 if no Y axis behavior.
            </summary>
            <returns>Returns the value read from AnalogIn</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.RawZ">
            <summary>
            Reads the raw, un-zeroed output value of the z axis and returns
            0 if no Z axis behavior.
            </summary>
            <returns>Returns the value read from AnalogIn</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.ReadAxisX">
            <summary>
            Reads the raw x input and calibrates it against the zeroed value.
            *Note Zero() must be called before this
            </summary>
            <returns>Returns the calibrated x axis acceleration
            reading</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.ReadAxisY">
            <summary>
            Reads the raw y input and calibrates it against the zeroed value.
            *Note Zero() must be called before this
            </summary>
            <returns>Returns the calibrated y axis acceleration
            reading</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.ReadAxisZ">
            <summary>
            Reads the raw z input and calibrates it against the zeroed value.
            *Note Zero() must be called before this
            </summary>
            <returns>Returns the calibrated z axis acceleration reading</returns>
        </member>
        <member name="M:PiEAPI.AnalogAccelerometer.Zero">
            <summary>
            Finds the zeroed values of all three axes and stores them.
            Averages 1000 readings together to reduce noise.
            </summary>
        </member>
        <member name="P:PiEAPI.AnalogAccelerometer.XAxisAcceleration">
            <summary>
            Holds the last updated acceleration reading for the x-axis.
            </summary>
        </member>
        <member name="P:PiEAPI.AnalogAccelerometer.YAxisAcceleration">
            <summary>
            Holds the last updated acceleration reading for the y-axis.
            </summary>
        </member>
        <member name="P:PiEAPI.AnalogAccelerometer.ZAxisAcceleration">
            <summary>
            Holds the last updated acceleration reading for the z-axis.
            </summary>
        </member>
        <member name="T:PiEAPI.AnalogPotentiometer">
            <summary>
            A class representing the analog potentiometer.
            </summary>
        </member>
        <member name="F:PiEAPI.AnalogPotentiometer.potentiometer">
            <summary>The potentiometer instance of AnalogIn.</summary>
        </member>
        <member name="M:PiEAPI.AnalogPotentiometer.#ctor(PiEAPI.Robot,PiE.HAL.GHIElectronics.NETMF.Hardware.AnalogIn)">
            <summary>Initializes a new instance of the
            <see cref="T:PiEAPI.AnalogPotentiometer"/> class.</summary>
            <param name="robot">The robot it belongs to.</param>
            <param name="pin">The potentiometer's pin.</param>
        </member>
        <member name="M:PiEAPI.AnalogPotentiometer.GetValues">
            <summary>Returns the angle as of the last update.</summary>
            <returns>The angle (in degrees) as of the last update.</returns>
        </member>
        <member name="M:PiEAPI.AnalogPotentiometer.Update">
            <summary>Updates the angle.</summary>
        </member>
        <member name="P:PiEAPI.AnalogPotentiometer.Angle">
            <summary>The current angle in degrees.</summary>
        </member>
        <member name="T:PiEAPI.PolarBear">
            <summary>
            The actual motor controller for a piece of hardware. This is what
            will be sending commands to the motor, setting velocity/brakes.
            This handles some of the lower level stuff so the students don't
            have to worry about it.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.Clock">
            <summary>
            Clock is the I2C device's clock rate in Hz.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.Timeout">
            <summary>
            Timeout is the amount of time (in milliseconds? I'm not sure) the
            robot will wait after sending instructions without receiving a
            response before closing the connection.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.MaxBraking">
            <summary>
            MAXBRAKING is the maximum value the motor accepts for braking.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.deviceAddress">
            <summary>
            deviceAddress is the address the motor controller is located.
            This is the target of all instruction write procedures.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.connectionConfig">
            <summary>
            connectionConfig is the communication protocol to the motor
            controller. It holds an I2CDevice object representing our
            motor.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.actionBuffer">
            <summary>
            actionBuffer is an array to hold and send a sequence of actions to the
            motor for execution. In this case it is length 1 because we only
            need to set one parameter in each call.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.sendBuffer">
            <summary>
            sendbuffer is a struct to communicate how we want the motor to
            behave. The motor controller hardware behaves interestingly.
            The first byte refers to which register we want to write to. 0x01
            is for operation mode (forward/reverse/brake). Second byte is the
            value we want to write into the afore mentioned register--it can
            be {0, 1, 2}. Since we wrote a byte into the motor controller,
            the register pointer is incremented to 0x02 which is the motor
            PWM value in the range [-255 255]. So the last byte in sendbuffer
            is the new PWM value to write into the motor. So we always want
            sendbuffer[0] = 0x01. And the 1 and 0 tells the motor to drive
            forward with 0 speed.
            </summary>
        </member>
        <member name="M:PiEAPI.PolarBear.#ctor(PiEAPI.Robot,System.UInt16,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the PolarBear class. This represents
            the motor fitted to the robot and we communicate new values to
            and from it here.
            </summary>
            <param name="robot"> robot is the Robot object this piece of
            hardware belongs to. </param>
            <param name="deviceAdd"> deviceAdd is the device address. It allows
            us to specifically communicate with the correct robot. </param>
            <param name="polarMaxReverseThrottle"> This is an
            optional parameter for the students. They can change the
            maximum reverse velocity should they choose to. This value will
            still be clamped to abide by the firmware and memory limitation of
            -255. </param>
            <param name="polarMaxForwardsThrottle"> This is an optional
            parameter for the students. They can change the maximum forwards
            velocity should they choose to. This value will still be clamped
            to abide by the firmware limitation of 255. </param>
        </member>
        <member name="M:PiEAPI.PolarBear.#ctor(PiEAPI.Robot,System.UInt16)">
            <summary>
            Same as above with default arguments.
            </summary>
            <param name="robot">Same robot as above.</param>
            <param name="deviceAdd">Same address as above.</param>
        </member>
        <member name="M:PiEAPI.PolarBear.Write">
            <summary>
            As part of the Actuator interface, this allows the operating state
            of the motor to be set among drive, reverse and brake.
            </summary>
        </member>
        <member name="M:PiEAPI.PolarBear.Kill">
            <summary>
            Stops the motor and prevents it from driving until
            Revive() is called. StudentCode can use this for
            fail-safety measures, etc.
            </summary>
        </member>
        <member name="M:PiEAPI.PolarBear.Revive">
            <summary>
            StudentCode can use this to revive after killing. This will not
            affect disables sent from the field or PiEMOS.
            </summary>
        </member>
        <member name="M:PiEAPI.PolarBear.SendAction(PiEAPI.PolarBear.OpMode,System.Int32)">
            <summary>
            Sends commands to the motor.
            </summary>
            <param name="operation">The operation state that is sent to the
            motor. This should always be a member of enum OpMode.</param>
            <param name="amount">The value to write to the speed registers.
            Only the first byte will be sent.</param>
        </member>
        <member name="P:PiEAPI.PolarBear.ConnectionDeviceA">
            <summary>
            Gets or sets the I2CDevice communication configuration. See
            connectionConfig description. This is only for legacy purposes.
            This used to be a public field so it may or may not need changing
            at runtime outside of this class. This has been renamed so
            hopefully nothing depended on it outside of this class.
            TODO(felixli): Determine if this is necessary later.
            </summary>
        </member>
        <member name="T:PiEAPI.PolarBear.OpMode">
            <summary>
            OpMode is the operation mode you wish to set for the motor. It
            supports forward, reverse and braking. Each setting is a byte
            that must be cast at usage.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.OpMode.REV">
            <summary>
            REV is the code byte that tells the motor controller to drive
            the motor backwards.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.OpMode.FWD">
            <summary>
            FWD is the code byte that tells the motor controller to drive
            the motor forwards.
            </summary>
        </member>
        <member name="F:PiEAPI.PolarBear.OpMode.BRAKE">
            <summary>
            BRAKE is the code byte that tells the motor controller to
            apply brakes.
            </summary>
        </member>
        <member name="T:PiEAPI.Utilities">
            <summary>
            This is a general class for miscellaneous methods.
            </summary>
        </member>
        <member name="M:PiEAPI.Utilities.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:PiEAPI.Sherlock"/> class from being created.
            </summary>
        </member>
        <member name="M:PiEAPI.Utilities.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamp is a general purpose method that will ensure a given
            argument falls between two boundary values. If input is greater
            than the upper bound, it will return the upper bound. If
            input is less than lower bound, it will return the lower bound.
            Otherwise, it will return the input value.
            </summary>
            <param name="input">The value in question that must
            be bounded.</param>
            <param name="low">The lower bound. Implicitly less than
            upper bound.</param>
            <param name="high">The upper bound. Implicitly greater than
            lower bound.</param>
            <returns>The input value bounded between low and high
            arguments.</returns>
        </member>
        <member name="M:PiEAPI.Utilities.Clamp(System.Single,System.Int32,System.Int32)">
            <summary>
            Similar to above, but works with floats.
            </summary>
            <param name="input">The value in question that must
            be bounded.</param>
            <param name="low">The lower bound. Implicitly less than
            greater bound.</param>
            <param name="high">The upper bound. Implicitly greater than
            lower bound.</param>
            <returns>The input value bounded between low and high
            arguments.</returns>
        </member>
        <member name="T:PiEAPI.RfidUid">
            <summary>
            Represents a 32-bit Unique Identifier (UID).
            </summary>
        </member>
        <member name="M:PiEAPI.RfidUid.#ctor(System.UInt32)">
            <summary>
            Create a new RfidUid from a 32-bit unsigned integer.
            </summary>
            <param name="id">Uid number in an unsigned int.</param>
        </member>
        <member name="M:PiEAPI.RfidUid.#ctor(System.Byte[])">
            <summary>
            Create a new RfidUid from a byte array.
            Stores as an unsigned 32-bit integer.
            </summary>
            <param name="idBytes">Uid number in a byte array.</param>
        </member>
        <member name="M:PiEAPI.RfidUid.ToString">
            <summary>
            Return a string version of the RfidUid.
            </summary>
            <returns>string version of this.Id</returns>
        </member>
        <member name="M:PiEAPI.RfidUid.Equals(System.Object)">
            <summary>
            Check if this is equal to the given object,
            if it can be cast to a RfidUid.
            If it can't return false
            </summary>
            <param name="obj">object to compare to</param>
            <returns>whether they're equal</returns>
        </member>
        <member name="M:PiEAPI.RfidUid.Equals(PiEAPI.RfidUid)">
            <summary>
            Check if this is equal to the given RfidUid.
            </summary>
            <param name="uid">RfidUid to compare to</param>
            <returns>whether they're equal</returns>
        </member>
        <member name="M:PiEAPI.RfidUid.GetHashCode">
            <summary>
            Returns a hash code for this object.
            Uses the Id, casted to an int.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:PiEAPI.RfidUid.BytesToInt(System.Byte[])">
            <summary>
            Concatenate bytes in an array into one 32-bit integer.
            Can take an array of up to 4 bytes.
            Operates on last 4 bytes of any array longer than 4.
            </summary>
            <param name="bytes">Byte array to convert. Maximum size 4.</param>
            <returns>32-bit concatenated byte array.</returns>
        </member>
        <member name="P:PiEAPI.RfidUid.Id">
            <summary>
            The RfidUid's id number
            </summary>
        </member>
        <member name="T:PiEAPI.XBeeTXPacket">
            <summary>
            Class to represent an outgoing XBee packet.
            Only handles 64-bit addresses (the only type used).
            </summary>
        </member>
        <member name="M:PiEAPI.XBeeTXPacket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.XBeeTXPacket"/> class.
            </summary>
        </member>
        <member name="M:PiEAPI.XBeeTXPacket.#ctor(System.Byte,System.UInt64,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:PiEAPI.XBeeTXPacket"/> class.
            </summary>
            <param name="packetFrameID">Frame ID</param>
            <param name="packetDst64">64-bit destination address</param>
            <param name="packetOptions">Transmission options</param>
            <param name="packetData">Payload data</param>
        </member>
        <member name="M:PiEAPI.XBeeTXPacket.GetData">
            <summary>
            Pack everything into a byte[] that can be sent to the XBee.
            </summary>
            <returns>byte[] array to send to XBee</returns>
        </member>
        <member name="P:PiEAPI.XBeeTXPacket.FrameID">
            <summary>
            Gets or sets the frame ID in the packet.
            </summary>
        </member>
        <member name="P:PiEAPI.XBeeTXPacket.Dst64">
            <summary>
            Gets or sets the destination address in the packet.
            </summary>
        </member>
        <member name="P:PiEAPI.XBeeTXPacket.Options">
            <summary>
            Gets or sets the transmission options in the packet.
            </summary>
        </member>
        <member name="P:PiEAPI.XBeeTXPacket.Data">
            <summary>
            Gets or sets the payload data in the packet.
            </summary>
        </member>
        <member name="T:PiEAPI.PageData">
            <summary>
            Class to represent the incoming page data we parse out of the XBee packet.
            </summary>
        </member>
        <member name="M:PiEAPI.PageData.#ctor(System.Byte[])">
            <summary>Initializes a new instance of the
            <see cref="T:PiEAPI.PageData"/> class.
            </summary>
            <param name="packet">The incoming packet data to parse</param>
        </member>
        <member name="P:PiEAPI.PageData.Ident">
            <summary>Gets or sets the ident byte.</summary>
        </member>
        <member name="P:PiEAPI.PageData.PageNumber">
            <summary>Gets or sets the page number.</summary>
        </member>
        <member name="P:PiEAPI.PageData.Data">
            <summary>Gets or sets the data in the page.</summary>
        </member>
    </members>
</doc>
