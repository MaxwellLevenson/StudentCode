// <copyright file="StudentCode.cs" company="Pioneers in Engineering">
// Licensed to Pioneers in Engineering under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Pioneers in Engineering licenses 
// this file to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
//  with the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
// </copyright>

namespace StudentPiER
{
    using System;
    using PiE.HAL.GHIElectronics.NETMF.FEZ;
    using PiE.HAL.GHIElectronics.NETMF.Hardware;
    using PiE.HAL.Microsoft.SPOT;
    using PiE.HAL.Microsoft.SPOT.Hardware;
    using PiEAPI;

    /// <summary>
    /// Student Code template
    /// </summary>
    public class StudentCode : RobotCode
    {
        /// <summary>
        /// This is your robot
        /// </summary>
        private Robot robot;

        /// <summary>
        /// This stopwatch measures time, in seconds
        /// </summary>
        private Stopwatch stopwatch;

        /// <summary>
        /// The right drive motor, on connector M0
        /// </summary>
        private GrizzlyBear rightMotor;

        /// <summary>
        /// The left drive motor, on connector M1
        /// </summary>
        private GrizzlyBear leftMotor;

        /// <summary>
        /// The motor controlling the position of the hopper, on connector M2
        /// </summary>
        private GrizzlyBear hopperMotor;

        /// <summary>
        /// The motor controlling the converyor belt for the pick-up mechanism, on connector M3
        /// </summary>
        private GrizzlyBear conveyorBeltMotor;

        /// <summary>
        /// A flag to toggle RFID usage in the code
        /// </summary>
        private bool useRfid;

        /// <summary>
        /// The rfid sensor
        /// </summary>
        private Rfid rfid; 

        /// <summary>
        /// The encoder for the left motor
        /// </summary>
        private GrizzlyEncoder leftEncoder;

        /// <summary>
        /// The encoder for the right motor
        /// </summary>
        private GrizzlyEncoder rightEncoder;

        /// <summary>
        /// The step size for the encoders
        /// </summary>
        private float Step = 0.002F;

        /// <summary>
        /// The limit switch for testing if the hopper is closed, on connector D0
        /// </summary>
        private DigitalLimitSwitch closedSwitch;

        /// <summary>
        /// The limit switch for testing if the hopper is open, on connector D1
        /// </summary>
        private DigitalLimitSwitch openSwitch;

        private MicroMaestro mm;
        private ServoMotor servo0;
        /// <summary>
        ///   Initializes a new instance of the
        ///   <see cref="StudentPiER.StudentCode"/> class.
        /// </summary>
        /// <param name='robot'>
        ///   The Robot to associate with this StudentCode
        /// </param>
        public StudentCode(Robot robot)
        {
            this.robot = robot;
            this.stopwatch = new Stopwatch();
            this.stopwatch.Start();
            this.useRfid = false;
            if (this.useRfid)
            {
                this.rfid = new Rfid(robot);
            }
            this.leftMotor = new GrizzlyBear(robot, Watson.Motor.M0);
            this.rightMotor = new GrizzlyBear(robot, Watson.Motor.M1);
            this.hopperMotor = new GrizzlyBear(robot, Watson.Motor.M2);
            this.conveyorBeltMotor = new GrizzlyBear(robot, Watson.Motor.M3);
            this.leftEncoder = new GrizzlyEncoder(Step, this.leftMotor, this.robot);
            this.rightEncoder = new GrizzlyEncoder(Step, this.rightMotor, this.robot);
            this.closedSwitch = new DigitalLimitSwitch(robot, Watson.Digital.D1);
            this.openSwitch = new DigitalLimitSwitch(robot, Watson.Digital.D2);
            this.mm = new MicroMaestro(robot, 1);
            this.servo0 = new ServoMotor(robot, mm, 0, 0, 75, 0);

        }

        /// <summary>
        /// Main method which initializes the robot, and starts
        /// it running. Do not modify.
        /// </summary>
        public static void Main()
        {
            // Initialize robot
            Robot robot = new Robot("1", "COM4");
            Debug.Print("Code loaded successfully!");
            Supervisor supervisor = new Supervisor(new StudentCode(robot));
            supervisor.RunCode();
        }

        /// <summary>
        ///  The Robot to use.
        /// </summary>
        /// <returns>
        ///   Robot associated with this StudentCode.
        /// </returns>
        public Robot GetRobot()
        {
            return this.robot;
        }

        /// <summary>
        /// The robot will call this method every time it needs to run the
        /// user-controlled student code
        /// The StudentCode should basically treat this as a chance to read all the
        /// new PiEMOS analog/digital values and then use them to update the
        /// actuator states
        /// </summary>
        /// 

        /*public void SpeedAdjustment(float speedForward)
        {
           float rightStart = this.rightEncoder.Displacement;
            float leftStart = this.leftEncoder.Displacement;
            float timeStart = (float)this.stopwatch.ElapsedTime;
               
            float rightWheelSpeed = this.rightEncoder.Displacement / (float)(this.stopwatch.ElapsedTime);
            float leftWheelSpeed = this.leftEncoder.Displacement / (float)(this.stopwatch.ElapsedTime);

            float speedRatio = leftWheelSpeed / rightWheelSpeed;

           

        }*/

        /*public int GetRightSlowThrottle()
        {
            if (this.robot.PiEMOSAnalogVals[3] < 5 && this.robot.PiEMOSAnalogVals[3] > -5)
            {
                this.leftMotor.Throttle = 0;
            }
            else if (this.robot.PiEMOSAnalogVals[1] <= 5)
            {
                this.rightMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[1] * 0.4) + 40;
            }
            else if (this.robot.PiEMOSAnalogVals[3] <= 5)
            {
                this.leftMotor.Throttle = -1 * (int)(this.robot.PiEMOSAnalogVals[3] * 0.4) - 40;
            }
            else if (this.robot.PiEMOSAnalogVals[1] >= 5)
            {
                this.rightMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[1] * 0.4) - 40;
            }
            else if (this.robot.PiEMOSAnalogVals[3] >= 5)
            {
                this.leftMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[3] * 0.4) + 40;
            }
            else
            {
                this.rightMotor.Throttle = 0;
                this.leftMotor.Throttle = 0;
            }
            return this.rightMotor.Throttle;
        }

        public int GetLeftSlowThrottle()
        { 
        if (this.robot.PiEMOSAnalogVals[3] < 5 && this.robot.PiEMOSAnalogVals[3] > -5) 
                {
                    this.leftMotor.Throttle = 0;
                }
                else if (this.robot.PiEMOSAnalogVals[1] <= 5) 
                {
                    this.rightMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[1] * 0.4) + 40;
                }
                else if (this.robot.PiEMOSAnalogVals[3] <= 5) 
                {
                    this.leftMotor.Throttle = -1 * (int)(this.robot.PiEMOSAnalogVals[3] * 0.4) - 40;
                }
                else if (this.robot.PiEMOSAnalogVals[1] >= 5) 
                {
                    this.rightMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[1] * 0.4) - 40;
                }
                else if (this.robot.PiEMOSAnalogVals[3] >= 5)
                {
                    this.leftMotor.Throttle = (int)(this.robot.PiEMOSAnalogVals[3] * 0.4) + 40;
                }
                else 
                {
                    this.rightMotor.Throttle = 0;
                    this.leftMotor.Throttle = 0;
                }
        return this.leftMotor.Throttle;
        }*/

        /// <summary>
        /// Determines throttle value based on the activation of precision mode
        /// </summary>
        /// <param name="baseThrottle"></param> The input value from the controller. The analog value of the left and right sticks.
        /// <param name="slow"></param> Whether slow mode is initiated or not
        /// <param name="deadpan"></param> The margin for error in the released throttle
        /// <returns></returns> The adjusted throttle value
        public int GetTrueThrottle(int baseThrottle ,Boolean slow, int deadpan) 
        {
            if (!slow) 
            {
                return baseThrottle;
            }
            if (baseThrottle > deadpan) 
                {
                    return ((int)(baseThrottle * 0.4) + 40);
                }
            if (baseThrottle < -1 * deadpan)
            {
                return ((int)(baseThrottle * 0.4) - 40);
            }
            else 
            {
                return 0;
            }
        }

        /// <summary>
        /// Determines the position of the hopper door based on the activation of limit switches at the top and bottom of the hopper
        /// </summary>
        /// <returns></returns> The position of the hopper door: open, closed, or in between
        public int hopperPosition() 
        {
            if (this.closedSwitch.IsPressed == true && this.openSwitch.IsPressed == false) 
            {
                return 1;
            }

            if (this.closedSwitch.IsPressed == false && this.openSwitch.IsPressed == true)
            {
                return 2;
            }
            
            else 
            {
                return 0;
            }
        }

        /// <summary>
        /// Uses the position of the hopper to determine the speed at which the motor should rotate when the driver elects to move the door
        /// </summary>
        /// <returns></returns> A value of throttle for the hopper motor
        public int getTrueHopperThrottle() 
        {
            if (this.robot.PiEMOSDigitalVals[5] == true && hopperPosition() == 1) 
            {
                return -50;
            }

            else if (this.robot.PiEMOSDigitalVals[5] == true && hopperPosition() == 2) 
            {
                return 50;
            }

            else 
            {
                return 30;
            }
        }

        public void TeleoperatedCode()
        {
            //Debug.Print("Tele-op " + this.stopwatch.ElapsedTime);
            this.rightMotor.Throttle = GetTrueThrottle(this.robot.PiEMOSAnalogVals[1], this.robot.PiEMOSDigitalVals[6], 5);
            this.leftMotor.Throttle = -1 * GetTrueThrottle(this.robot.PiEMOSAnalogVals[3], this.robot.PiEMOSDigitalVals[6], 5);

            this.robot.FeedbackAnalogVals[0] = this.rightMotor.Throttle;
            this.robot.FeedbackAnalogVals[1] = this.leftMotor.Throttle;

            this.robot.FeedbackAnalogVals[6] = (int)this.leftEncoder.Displacement;
            this.robot.SendConsoleMessage("Displacement = " + this.rightEncoder.Displacement);

            if (this.useRfid)
            {
                this.ReportFieldItemType(this.rfid.CurrentItemScanned);
            }

            if (this.rfid.CurrentItemScanned != null) 
            {
                this.robot.SendReleaseCode(this.rfid.CurrentItemScanned);
            }

            this.hopperMotor.Throttle = getTrueHopperThrottle();

            this.conveyorBeltMotor.Throttle = this.robot.PiEMOSAnalogVals[5];

            servo0.AngularSpeed = 75;

            if (this.robot.PiEMOSDigitalVals[1] == true && this.servo0.TargetRotation == 90) 
            {
                this.servo0.TargetRotation = 0;
            }
            else if (this.robot.PiEMOSDigitalVals[1] == true && this.servo0.TargetRotation == 0)
            {
                this.servo0.TargetRotation = 90;
            }
        }

        /// <summary>
        /// The robot will call this method every time it needs to run the
        /// autonomous student code
        /// The StudentCode should basically treat this as a chance to change motorsw
        /// and servos based on non user-controlled input like sensors. But you
        /// don't need sensors, as this example demonstrates.
        /// </summary>
        public void AutonomousCode()
        {
            /*this.rightMotor.Throttle = 60;
            this.leftMotor.Throttle = 60;
            this.rightEncoder.Update();
            Debug.Print("Distance " + this.rightEncoder.Displacement);*/

            /*this.leftMotor.Throttle = -60;
           this.rightMotor.Throttle = 60;*/
            
            float leftDisplacement = this.leftEncoder.Displacement;
            float rightDisplacement = this.rightEncoder.Displacement;

           this.robot.SendConsoleMessage("Displacement = " + this.rightEncoder.Displacement);

            //move forward initially
            if (rightDisplacement < 20.0)
            {
                Debug.Print("Forward");
                this.rightMotor.Throttle = 60;
                this.leftMotor.Throttle = -60;
            }
               //turn right (to get to the goal)
            else if (rightDisplacement < 30.0)
            {
                Debug.Print("Turn Right");
                this.rightMotor.Throttle = -90;
                this.leftMotor.Throttle = -90;
            }
            //move forward
            /*else if (rightDisplacement < 6.0 + 4.5 * 3.14 + 4.0)
            {
                Debug.Print("forward 2");
                this.rightMotor.Throttle = 60;
                this.leftMotor.Throttle = -60;
            }
            //turn left (to face the goal)
            else if (rightDisplacement < 6.0 + 4.5 * 3.14 + 4.0 - 4.5 * 3.14)
            {
                Debug.Print("Turn Left");
                this.rightMotor.Throttle = 50;
                this.leftMotor.Throttle = 50;
            }*/


               
        }

        /// <summary>
        /// The robot will call this method periodically while it is disabled
        /// during the autonomous period. Actuators will not be updated during
        /// this time.
        /// </summary>
        public void DisabledAutonomousCode()
        {
            this.stopwatch.Reset(); // Restart stopwatch before start of autonomous
        }

        /// <summary>
        /// The robot will call this method periodically while it is disabled
        /// during the user controlled period. Actuators will not be updated
        /// during this time.
        /// </summary>
        public void DisabledTeleoperatedCode()
        {
        }

        /// <summary>
        /// This is called whenever the supervisor disables studentcode.
        /// </summary>
        public void WatchdogReset()
        {
        }

        /// <summary>
        /// Send the GroupType of a FieldItem object to PiEMOS.
        /// Populates two indices of FeedbackDigitalVals.
        /// </summary>
        /// <param name="item">the FieldItem to send infotmaion about</param>
        /// <param name="index1">first index to use</param>
        /// <param name="index2">second index to use</param>
        private void ReportFieldItemType(FieldItem item, int index1 = 6, int index2 = 7)
        {
            bool feedback1;
            bool feedback2;

            if (item == null)
            {
                feedback1 = false;
                feedback2 = false;
            }
            else if (item.GroupType == FieldItem.PlusOneBox)
            {
                feedback1 = true;
                feedback2 = false;
            }
            else if (item.GroupType == FieldItem.TimesTwoBox)
            {
                feedback1 = true;
                feedback2 = true;
            }
            else
            {
                feedback1 = false;
                feedback2 = true;
            }

            this.robot.FeedbackDigitalVals[index1] = feedback1;
            this.robot.FeedbackDigitalVals[index2] = feedback2;
        }
    }
}
